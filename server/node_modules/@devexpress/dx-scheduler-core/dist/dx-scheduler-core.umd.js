/**
 * Bundle of @devexpress/dx-scheduler-core
 * Generated: 2019-09-16
 * Version: 2.0.5
 * License: https://js.devexpress.com/Licensing
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('moment'), require('rrule')) :
    typeof define === 'function' && define.amd ? define(['exports', 'moment', 'rrule'], factory) :
    (global = global || self, factory((global.DevExpress = global.DevExpress || {}, global.DevExpress.DXSchedulerCore = {}), global.moment, global.rrule));
}(this, function (exports, moment, rrule) { 'use strict';

    if (typeof process === "undefined") { var process = { env: {} }; }

    moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    var VERTICAL_TYPE = 'vertical';
    var HORIZONTAL_TYPE = 'horizontal';
    var SCROLL_OFFSET = 50;
    var SCROLL_SPEED_PX = 30;
    var SECONDS = 'seconds';
    var MINUTES = 'minutes';
    var HOURS = 'hours';
    var RESIZE_TOP = 'resize-start';
    var RESIZE_BOTTOM = 'resize-end';
    var POSITION_START = 'start';
    var POSITION_END = 'end';
    var AUTO_HEIGHT = 'auto';
    var DAY_OPTIONS = { day: 'numeric' };
    var WEEK_DAY_OPTIONS = { weekday: 'short' };
    var SHORT_MONTH_OPTIONS = { month: 'short' };
    var HOUR_MINUTE_OPTIONS = { hour: 'numeric', minute: 'numeric' };
    var MONTH_YEAR_OPTIONS = { month: 'long', year: 'numeric' };
    var DAY_SHORT_MONTH_OPTIONS = { day: 'numeric', month: 'short' };
    var SHORT_MONTH_LONG_YEAR_OPTIONS = { month: 'short', year: 'numeric' };
    var SHORT_MONTH_SHORT_YEAR_OPTIONS = { month: 'short', year: '2-digit' };
    var DAY_LONG_MONTH_LONG_YEAR_OPTIONS = { day: 'numeric', month: 'long', year: 'numeric' };
    var DAY_SHORT_MONTH_LONG_YEAR_OPTIONS = {
        day: 'numeric', month: 'short', year: 'numeric',
    };
    var DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS = {
        day: 'numeric', month: 'short', year: '2-digit',
    };
    var RECURRENCE_EDIT_SCOPE = {
        ALL: 'all',
        CURRENT_AND_FOLLOWING: 'currentAndFollowing',
        CURRENT: 'current',
    };

    var computed = function (getters, viewName, baseComputed, defaultValue) {
        if (getters.currentView.name !== viewName && !!defaultValue) {
            return defaultValue;
        }
        return baseComputed(getters, viewName);
    };
    var toPercentage = function (value, total) { return (value * 100) / total; };
    var createExcludedInterval = function (day, start) {
        var leftBound = moment(start.day(day));
        return [
            leftBound,
            moment(leftBound).hour(start.hour()).endOf('day'),
        ];
    };
    var excludedIntervals = function (excludedDays, start) { return excludedDays
        .map(function (day) { return (day === 0 ? 7 : day); })
        .sort(function (a, b) { return a - b; })
        .reduce(function (acc, day, i, allDays) {
        if (i && day === allDays[i - 1] + 1) {
            acc[i - 1][1].day(day);
        }
        else {
            acc.push(createExcludedInterval(day, start));
        }
        return acc;
    }, []); };
    var byDayPredicate = function (boundary, date) { return (boundary.isSameOrAfter(date, 'day')
        && !boundary.isSame(boundary.clone().startOf('day'))); };
    var inInterval = function (date, interval) { return date.isBetween(interval[0], interval[1], undefined, '[]'); };
    var viewPredicate = function (appointment, left, right, excludedDays, removeAllDayAppointments) {
        if (excludedDays === void 0) { excludedDays = []; }
        if (removeAllDayAppointments === void 0) { removeAllDayAppointments = false; }
        var start = appointment.start, end = appointment.end;
        var isAppointmentInBoundary = end.isAfter(left)
            && start.isBefore(right);
        var isAppointmentInExcludedDays = !!excludedIntervals(excludedDays, moment(left))
            .find(function (interval) { return (inInterval(start, interval) && inInterval(end, interval)); });
        var considerAllDayAppointment = removeAllDayAppointments
            ? moment(end).diff(start, 'hours') < 24 && !appointment.allDay
            : true;
        return isAppointmentInBoundary && !isAppointmentInExcludedDays && considerAllDayAppointment;
    };
    var sortAppointments = function (appointments, byDay) {
        if (byDay === void 0) { byDay = false; }
        return appointments
            .slice().sort(function (a, b) {
            var compareValue = byDay ? 'day' : undefined;
            if (a.start.isBefore(b.start, compareValue))
                return -1;
            if (a.start.isAfter(b.start, compareValue))
                return 1;
            if (a.start.isSame(b.start, compareValue)) {
                if (a.end.isBefore(b.end))
                    return 1;
                if (a.end.isAfter(b.end))
                    return -1;
            }
            return 0;
        });
    };
    var findOverlappedAppointments = function (sortedAppointments, byDay) {
        if (byDay === void 0) { byDay = false; }
        var appointments = sortedAppointments.slice();
        var groups = [];
        var totalIndex = 0;
        while (totalIndex < appointments.length) {
            groups.push([]);
            var current = appointments[totalIndex];
            var currentGroup = groups[groups.length - 1];
            var next = appointments[totalIndex + 1];
            var maxBoundary = current.end;
            currentGroup.push(current);
            totalIndex += 1;
            while (next && (maxBoundary.isAfter(next.start)
                || (byDay && byDayPredicate(maxBoundary, next.start)))) {
                currentGroup.push(next);
                if (maxBoundary.isBefore(next.end))
                    maxBoundary = next.end;
                totalIndex += 1;
                next = appointments[totalIndex];
            }
        }
        return groups;
    };
    var isMidnight = function (date) { return date.isSame(date.clone().startOf('day')); };
    var maxBoundaryPredicate = function (maxBoundary, startDate) { return ((maxBoundary.isBefore(startDate, 'day'))
        || (isMidnight(maxBoundary) && maxBoundary.isSame(startDate, 'day'))); };
    var adjustAppointments = function (groups, byDay) {
        if (byDay === void 0) { byDay = false; }
        return groups.map(function (items) {
            var offset = 0;
            var reduceValue = 1;
            var appointments = items.slice();
            var groupLength = appointments.length;
            for (var startIndex = 0; startIndex < groupLength; startIndex += 1) {
                var appointment = appointments[startIndex];
                if (appointment.offset === undefined) {
                    var maxBoundary = appointment.end;
                    appointment.offset = offset;
                    for (var index = startIndex + 1; index < groupLength; index += 1) {
                        if (appointments[index].offset === undefined) {
                            if ((!byDay && maxBoundary.isSameOrBefore(appointments[index].start))
                                || (byDay && maxBoundaryPredicate(maxBoundary, appointments[index].start))) {
                                maxBoundary = appointments[index].end;
                                appointments[index].offset = offset;
                            }
                        }
                    }
                    offset += 1;
                    if (reduceValue < offset)
                        reduceValue = offset;
                }
            }
            return { items: appointments, reduceValue: reduceValue };
        });
    };
    var calculateFirstDateOfWeek = function (currentDate, firstDayOfWeek, excludedDays) {
        if (excludedDays === void 0) { excludedDays = []; }
        var currentLocale = moment.locale();
        moment.updateLocale('tmp-locale', {
            week: { dow: firstDayOfWeek, doy: 1 },
        });
        var firstDateOfWeek = moment(currentDate).startOf('week');
        if (excludedDays.indexOf(firstDayOfWeek) !== -1) {
            excludedDays.slice().sort().forEach(function (day) {
                if (day === firstDateOfWeek.day()) {
                    firstDateOfWeek.add(1, 'days');
                }
            });
        }
        moment.locale(currentLocale);
        return firstDateOfWeek.toDate();
    };
    var unwrapGroups = function (groups) { return groups.reduce(function (acc, _a) {
        var items = _a.items, reduceValue = _a.reduceValue;
        acc.push.apply(acc, __spread(items.map(function (appointment) { return ({
            start: appointment.start,
            end: appointment.end,
            dataItem: appointment.dataItem,
            offset: appointment.offset,
            reduceValue: reduceValue,
            fromPrev: moment(appointment.start).diff(appointment.dataItem.startDate, 'minutes') > 1,
            toNext: moment(appointment.dataItem.endDate).diff(appointment.end, 'minutes') > 1,
        }); })));
        return acc;
    }, []); };
    var getAppointmentStyle = function (_a) {
        var top = _a.top, left = _a.left, width = _a.width, height = _a.height;
        return ({
            height: height,
            width: width + "%",
            transform: "translateY(" + top + "px)",
            msTransform: "translateY(" + top + "px)",
            left: left + "%",
            position: 'absolute',
        });
    };
    var rectCalculatorBase = function (appointment, getRectByDates, options) { return getRectByDates(appointment.start, appointment.end, options); };
    var horizontalRectCalculator = function (appointment, _a) {
        var rectByDates = _a.rectByDates, multiline = _a.multiline, _b = _a.rectByDatesMeta, cellElementsMeta = _b.cellElementsMeta, viewCellsData = _b.viewCellsData;
        var _c = rectCalculatorBase(appointment, rectByDates, {
            multiline: multiline,
            cellElementsMeta: cellElementsMeta,
            viewCellsData: viewCellsData,
        }), top = _c.top, left = _c.left, width = _c.width, height = _c.height, parentWidth = _c.parentWidth;
        return {
            top: top + ((height / appointment.reduceValue) * appointment.offset),
            height: height / appointment.reduceValue,
            left: toPercentage(left, parentWidth),
            width: toPercentage(width, parentWidth),
            dataItem: appointment.dataItem,
            fromPrev: appointment.fromPrev,
            toNext: appointment.toNext,
            type: HORIZONTAL_TYPE,
        };
    };
    var verticalRectCalculator = function (appointment, _a) {
        var rectByDates = _a.rectByDates, multiline = _a.multiline, _b = _a.rectByDatesMeta, viewCellsData = _b.viewCellsData, cellDuration = _b.cellDuration, cellElementsMeta = _b.cellElementsMeta, excludedDays = _b.excludedDays;
        var _c = rectCalculatorBase(appointment, rectByDates, {
            multiline: multiline,
            viewCellsData: viewCellsData,
            cellDuration: cellDuration,
            excludedDays: excludedDays,
            cellElementsMeta: cellElementsMeta,
        }), top = _c.top, left = _c.left, width = _c.width, height = _c.height, parentWidth = _c.parentWidth;
        var widthInPx = width / appointment.reduceValue;
        return {
            top: top,
            height: height,
            left: toPercentage(left + (widthInPx * appointment.offset), parentWidth),
            width: toPercentage(widthInPx, parentWidth),
            dataItem: appointment.dataItem,
            fromPrev: appointment.fromPrev,
            toNext: appointment.toNext,
            type: VERTICAL_TYPE,
        };
    };
    var calculateRectByDateIntervals = function (type, intervals, rectByDates, rectByDatesMeta) {
        var growDirection = type.growDirection, multiline = type.multiline;
        var sorted = sortAppointments(intervals, multiline);
        var grouped = findOverlappedAppointments(sorted, multiline);
        var rectCalculator = growDirection === HORIZONTAL_TYPE
            ? horizontalRectCalculator
            : verticalRectCalculator;
        return unwrapGroups(adjustAppointments(grouped, multiline))
            .map(function (appointment) { return rectCalculator(appointment, { rectByDates: rectByDates, multiline: multiline, rectByDatesMeta: rectByDatesMeta }); });
    };
    var expandRecurrenceAppointment = function (appointment, leftBound, rightBound) {
        var rightBoundUTC = new Date(getUTCDate(rightBound));
        var leftBoundUTC = new Date(getUTCDate(leftBound));
        var appointmentStartDate = moment(appointment.start).toDate();
        var options = __assign(__assign({}, rrule.RRule.parseString(appointment.rRule)), { dtstart: new Date(getUTCDate(appointmentStartDate)) });
        var correctedOptions = options.until
            ? __assign(__assign({}, options), { until: new Date(getUTCDate(options.until)) }) : options;
        var rruleSet = new rrule.RRuleSet();
        if (appointment.exDate) {
            appointment.exDate.split(',').reduce(function (acc, date) {
                var currentExDate = moment(date).toDate();
                rruleSet.exdate(new Date(getUTCDate(currentExDate)));
            }, []);
        }
        rruleSet.rrule(new rrule.RRule(correctedOptions));
        // According to https://github.com/jakubroztocil/rrule#important-use-utc-dates
        // we have to format the dates we get from RRuleSet to get local dates
        var datesInBoundaries = rruleSet.between(leftBoundUTC, rightBoundUTC, true)
            .map(function (date) { return moment.utc(date).format('YYYY-MM-DD HH:mm'); });
        if (datesInBoundaries.length === 0)
            return [];
        var appointmentDuration = moment(appointment.end)
            .diff(appointment.start, 'minutes');
        return datesInBoundaries.map(function (startDate, index) { return (__assign(__assign({}, appointment), { dataItem: __assign(__assign({}, appointment.dataItem), { startDate: moment(startDate).toDate(), endDate: moment(startDate).add(appointmentDuration, 'minutes').toDate(), parentData: appointment.dataItem }), start: moment(startDate), end: moment(startDate).add(appointmentDuration, 'minutes') })); });
    };
    var filterByViewBoundaries = function (appointment, leftBound, rightBound, excludedDays, removeAllDay) {
        var appointments = [appointment];
        if (appointment.rRule) {
            appointments = expandRecurrenceAppointment(appointment, leftBound, rightBound);
        }
        return appointments.filter(function (appt) { return viewPredicate(appt, leftBound, rightBound, excludedDays, removeAllDay); });
    };
    var getUTCDate = function (date) {
        return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes());
    };

    var subtractSecond = function (date) { return moment(date).subtract(1, 'second').toDate(); };
    var dayScale = function (currentDate, firstDayOfWeek, dayCount, excluded) {
        if (excluded === void 0) { excluded = []; }
        var result = [];
        var date = firstDayOfWeek !== undefined
            ? moment(calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excluded))
            : moment(currentDate);
        for (var index = 0; index < dayCount; index += 1) {
            if (excluded.findIndex(function (item) { return item === date.day(); }) === -1) {
                result.push(date.toDate());
            }
            date.add(1, 'days');
        }
        return result;
    };
    var timeScale = function (currentDate, firstDayOfWeek, startDayHour, endDayHour, cellDuration, excludedDays) {
        var result = [];
        var startDateOfView = firstDayOfWeek !== undefined
            ? calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excludedDays)
            : currentDate;
        var left = moment(startDateOfView).startOf('hour').hour(startDayHour);
        var right = moment(startDateOfView).startOf('hour').hour(endDayHour);
        while (left.isBefore(right)) {
            var startDate = left.toDate();
            left.add(cellDuration, 'minutes');
            result.push({ start: startDate, end: left.toDate() });
        }
        result[result.length - 1].end = subtractSecond(result[result.length - 1].end);
        return result;
    };
    var availableViews = function (views, viewName, viewDisplayName) {
        if (!views)
            return [{ name: viewName, displayName: viewDisplayName }];
        if (views.findIndex(function (view) { return viewName === view.name; }) === -1) {
            var nextViews = views.slice();
            nextViews.push({ name: viewName, displayName: viewDisplayName });
            return nextViews;
        }
        return views;
    };
    var viewCellsData = function (currentDate, firstDayOfWeek, dayCount, excludedDays, startDayHour, endDayHour, cellDuration, currTime) {
        var days = dayScale(currentDate, firstDayOfWeek, dayCount, excludedDays);
        var times = timeScale(currentDate, firstDayOfWeek, startDayHour, endDayHour, cellDuration, excludedDays);
        var currentTime = moment(currTime);
        return times.reduce(function (cellsAcc, time) {
            var start = moment(time.start);
            var end = moment(time.end);
            var rowCells = days.reduce(function (rowAcc, day) {
                var startDate = moment(day).hours(start.hours()).minutes(start.minutes()).toDate();
                var endDate = moment(day).hours(end.hours()).minutes(end.minutes()).toDate();
                var today = currentTime.isSame(startDate, 'day');
                rowAcc.push({ startDate: startDate, endDate: endDate, today: today });
                return rowAcc;
            }, []);
            cellsAcc.push(rowCells);
            return cellsAcc;
        }, []);
    };
    var allDayCells = function (viewCells) { return viewCells[0].map(function (cell) { return ({
        startDate: moment(cell.startDate).startOf('day').toDate(),
        endDate: moment(cell.startDate).add(1, 'day').startOf('day').toDate(),
    }); }); };
    var startViewDate = function (viewCells) { return moment(viewCells[0][0].startDate).toDate(); };
    var endViewDate = function (viewCells) {
        var lastRowIndex = viewCells.length - 1;
        var lastCellIndex = viewCells[lastRowIndex].length - 1;
        return subtractSecond(viewCells[lastRowIndex][lastCellIndex].endDate);
    };

    var MONTH_TYPE = 'month';
    var getViewType = function (currentViewType) {
        if (currentViewType === MONTH_TYPE)
            return HORIZONTAL_TYPE;
        return VERTICAL_TYPE;
    };

    var sliceAppointmentByDay = function (appointment) {
        var start = appointment.start, end = appointment.end, dataItem = appointment.dataItem;
        if (start.isSame(end, 'day')) {
            return [appointment];
        }
        return [
            { start: start, end: moment(start).endOf('day'), dataItem: dataItem },
            { start: moment(end).startOf('day'), end: end, dataItem: dataItem },
        ];
    };
    var dayBoundaryPredicate = function (appointment, leftBound, rightBound, excludedDays) {
        if (excludedDays === void 0) { excludedDays = []; }
        var dayStart = moment(leftBound);
        var dayEnd = moment(rightBound);
        var startDayTime = moment(appointment.start)
            .hour(dayStart.hour())
            .minutes(dayStart.minutes());
        var endDayTime = moment(appointment.start)
            .hour(dayEnd.hour())
            .minutes(dayEnd.minutes());
        if (appointment.end.isBefore(dayStart) || appointment.start.isAfter(dayEnd))
            return false;
        if (excludedDays.findIndex(function (day) { return day === moment(appointment.start).day(); }) !== -1)
            return false;
        return (appointment.end.isAfter(startDayTime)
            && appointment.start.isBefore(endDayTime));
    };
    var reduceAppointmentByDayBounds = function (appointment, leftBound, rightBound) {
        var dayStart = moment(leftBound);
        var dayEnd = moment(rightBound);
        var startDayTime = moment(appointment.start)
            .hour(dayStart.hour())
            .minutes(dayStart.minutes())
            .seconds(dayStart.seconds());
        var endDayTime = moment(appointment.start)
            .hour(dayEnd.hour())
            .minutes(dayEnd.minutes())
            .seconds(dayEnd.seconds());
        return __assign(__assign(__assign({}, appointment), (appointment.start.isSameOrBefore(startDayTime) ? { start: startDayTime } : null)), (appointment.end.isSameOrAfter(endDayTime) ? { end: endDayTime } : null));
    };

    var calculateWeekDateIntervals = function (appointments, leftBound, rightBound, excludedDays) { return appointments
        .map(function (_a) {
        var start = _a.start, end = _a.end, restArgs = __rest(_a, ["start", "end"]);
        return (__assign({ start: moment(start), end: moment(end) }, restArgs));
    })
        .reduce(function (acc, appointment) {
        return __spread(acc, filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, true));
    }, [])
        .reduce(function (acc, appointment) { return (__spread(acc, sliceAppointmentByDay(appointment))); }, [])
        .filter(function (appointment) { return dayBoundaryPredicate(appointment, leftBound, rightBound, excludedDays); })
        .map(function (appointment) { return reduceAppointmentByDayBounds(appointment, leftBound, rightBound); }); };

    var CELL_GAP_PX = 10;
    var CELL_BOUND_HORIZONTAL_OFFSET_PX = 1;
    var CELL_BOUND_VERTICAL_OFFSET_PX = 4;
    var getCellByDate = function (viewCellsData, date, takePrev) {
        if (takePrev === void 0) { takePrev = false; }
        var cellIndex = viewCellsData[0].findIndex(function (timeCell) { return moment(date)
            .isSame(timeCell.startDate, 'date'); });
        var rowIndex = viewCellsData.findIndex(function (timeCell) { return moment(date)
            .isBetween(timeCell[cellIndex].startDate, timeCell[cellIndex].endDate, 'seconds', takePrev ? '(]' : '[)'); });
        var totalCellIndex = (rowIndex * viewCellsData[0].length) + cellIndex;
        return {
            index: totalCellIndex,
            startDate: viewCellsData[rowIndex][cellIndex].startDate,
        };
    };
    var getCellRect = function (date, viewCellsData, cellDuration, cellElementsMeta, takePrev) {
        var _a = getCellByDate(viewCellsData, date, takePrev), cellIndex = _a.index, cellStartDate = _a.startDate;
        var _b = cellElementsMeta.getCellRects[cellIndex](), top = _b.top, left = _b.left, width = _b.width, cellHeight = _b.height;
        var timeOffset = moment(date).diff(cellStartDate, 'minutes');
        var topOffset = cellHeight * (timeOffset / cellDuration);
        var parentRect = cellElementsMeta.parentRect();
        return {
            top: top,
            left: left,
            width: width,
            topOffset: topOffset,
            parentRect: parentRect,
        };
    };
    var getVerticalRectByDates = function (startDate, endDate, _a) {
        var viewCellsData = _a.viewCellsData, cellDuration = _a.cellDuration, cellElementsMeta = _a.cellElementsMeta;
        var firstCellRect = getCellRect(startDate, viewCellsData, cellDuration, cellElementsMeta, false);
        var lastCellRect = getCellRect(endDate, viewCellsData, cellDuration, cellElementsMeta, true);
        var top = firstCellRect.top + firstCellRect.topOffset;
        var height = (lastCellRect.top + lastCellRect.topOffset) - top;
        return {
            width: firstCellRect.width - CELL_GAP_PX - CELL_BOUND_HORIZONTAL_OFFSET_PX,
            top: top - firstCellRect.parentRect.top + CELL_BOUND_HORIZONTAL_OFFSET_PX,
            left: firstCellRect.left - firstCellRect.parentRect.left + CELL_BOUND_HORIZONTAL_OFFSET_PX,
            parentWidth: firstCellRect.parentRect.width,
            height: height - CELL_BOUND_VERTICAL_OFFSET_PX,
        };
    };

    var allDayPredicate = function (appointment) { return (appointment.end.diff(appointment.start, 'hours') > 23
        || !!appointment.allDay); };
    var getAllDayCellIndexByDate = function (viewCellsData, date, takePrev) {
        var currentDate = moment(date);
        var cellIndex = viewCellsData[0]
            .findIndex(function (day) { return moment(day.startDate).day() === currentDate.day(); });
        if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {
            cellIndex -= 1;
        }
        return cellIndex;
    };
    var sliceAppointmentsByBoundaries = function (appointment, left, right, excludedDays) {
        if (excludedDays === void 0) { excludedDays = []; }
        var startDate = appointment.start.clone();
        var endDate = appointment.end.clone();
        var nextStart = startDate.clone();
        var nextEnd = endDate.clone();
        if (startDate.isBefore(left)) {
            nextStart = moment(left);
            nextStart.startOf('day');
        }
        if (endDate.isAfter(right)) {
            nextEnd = moment(right);
            nextEnd.endOf('day');
        }
        if (excludedDays.findIndex(function (day) { return day === startDate.day(); }) !== -1) {
            while (excludedDays.findIndex(function (day) { return day === nextStart.day(); }) !== -1
                && nextStart.isSameOrBefore(endDate, 'day')) {
                nextStart.add(1, 'days').startOf('day');
            }
        }
        if (excludedDays.findIndex(function (day) { return day === endDate.day(); }) !== -1) {
            while (excludedDays.findIndex(function (day) { return day === nextEnd.day(); }) !== -1
                && nextStart.isSameOrAfter(startDate, 'day')) {
                nextEnd.add(-1, 'days').endOf('day');
            }
        }
        return [__assign(__assign({}, appointment), { start: nextStart, end: nextEnd })];
    };

    var sliceAppointmentByWeek = function (timeBounds, appointment, step) {
        var left = timeBounds.left, right = timeBounds.right;
        var pieces = [];
        var start = appointment.start, end = appointment.end, restFields = __rest(appointment, ["start", "end"]);
        var apptStart = start;
        var apptEnd = end;
        if (apptStart.isBefore(left))
            apptStart = left.clone();
        if (apptEnd.isAfter(right))
            apptEnd = right.clone();
        var pieceFrom = apptStart.clone();
        var pieceTo = apptStart.clone();
        var i = 0;
        while (pieceTo.isBefore(apptEnd)) {
            var currentRightBound = left.clone().add(step * i, 'days').subtract(1, 'second');
            if (currentRightBound.isAfter(apptStart)) {
                pieceTo = apptStart.clone().add(step * i, 'days');
                if (pieceTo.isAfter(currentRightBound)) {
                    pieceTo = currentRightBound.clone();
                }
                if (pieceTo.isAfter(apptEnd)) {
                    pieceTo = apptEnd.clone();
                }
                if (!pieceFrom.isSameOrAfter(pieceTo)) {
                    pieces.push(__assign({ start: pieceFrom, end: pieceTo }, restFields));
                    pieceFrom = pieceTo.clone().add(1, 'second');
                }
            }
            i += 1;
        }
        return pieces;
    };
    var getMonthCellIndexByDate = function (viewCellsData, date, takePrev) {
        if (takePrev === void 0) { takePrev = false; }
        var startViewDate = moment(viewCellsData[0][0].startDate);
        var currentDate = moment(date);
        var cellIndex = currentDate.diff(startViewDate, 'days');
        if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {
            cellIndex -= 1;
        }
        return cellIndex;
    };

    var TOP_CELL_OFFSET = 0.32;
    var CELL_BOUND_OFFSET_PX = 1;
    var getCellRect$1 = function (date, viewCellsData, cellElementsMeta, takePrev, multiline) {
        var cellIndex = multiline
            ? getMonthCellIndexByDate(viewCellsData, date, takePrev)
            : getAllDayCellIndexByDate(viewCellsData, date, takePrev);
        var _a = cellElementsMeta.getCellRects[cellIndex](), top = _a.top, left = _a.left, width = _a.width, height = _a.height;
        var parentRect = cellElementsMeta.parentRect();
        return {
            top: top,
            left: left,
            width: width,
            height: height,
            parentRect: parentRect,
        };
    };
    var getHorizontalRectByDates = function (startDate, endDate, _a) {
        var multiline = _a.multiline, viewCellsData = _a.viewCellsData, cellElementsMeta = _a.cellElementsMeta;
        var firstCellRect = getCellRect$1(startDate, viewCellsData, cellElementsMeta, false, multiline);
        var lastCellRect = getCellRect$1(endDate, viewCellsData, cellElementsMeta, true, multiline);
        var top = firstCellRect.top + (firstCellRect.height * TOP_CELL_OFFSET);
        var height = firstCellRect.height - (firstCellRect.height * TOP_CELL_OFFSET);
        return {
            top: top - firstCellRect.parentRect.top,
            left: (firstCellRect.left - firstCellRect.parentRect.left) + CELL_BOUND_OFFSET_PX,
            width: ((lastCellRect.left - firstCellRect.left) + firstCellRect.width) - CELL_BOUND_OFFSET_PX,
            height: height,
            parentWidth: firstCellRect.parentRect.width,
        };
    };

    var DAY_COUNT = 7;
    var MONTH_LENGTH = 31;
    var monthCellsData = function (currentDate, firstDayOfWeek, intervalCount, today) {
        if (intervalCount === void 0) { intervalCount = 1; }
        var targetDate = moment(currentDate);
        var currentMonths = [targetDate.month()];
        while (currentMonths.length < intervalCount) {
            currentMonths.push(targetDate.add(1, 'months').month());
        }
        var firstMonthDate = moment(currentDate).date(1);
        var firstMonthDay = firstMonthDate.day() - firstDayOfWeek;
        var prevMonthDayCount = firstMonthDate.day(firstMonthDay).day() || DAY_COUNT;
        var prevMonth = moment(currentDate).subtract(1, 'months');
        var prevMonthStartDay = prevMonth.daysInMonth() - (prevMonthDayCount - 1);
        var from = moment()
            .year(prevMonth.year())
            .month(prevMonth.month())
            .date(prevMonthStartDay)
            .startOf('day');
        var result = [];
        while (result.length < (Math.trunc((MONTH_LENGTH * intervalCount) / DAY_COUNT) + 2)) {
            var week = [];
            while (week.length < DAY_COUNT) {
                week.push({
                    startDate: from.toDate(),
                    endDate: from.clone().add(1, 'day').toDate(),
                    otherMonth: currentMonths.findIndex(function (month) { return month === from.month(); }) === -1,
                    today: today ? moment(today).isSame(from, 'date') : false,
                });
                from.add(1, 'day');
            }
            result.push(week);
        }
        return result;
    };
    var calculateMonthDateIntervals = function (appointments, leftBound, rightBound) { return appointments
        .map(function (_a) {
        var start = _a.start, end = _a.end, restArgs = __rest(_a, ["start", "end"]);
        return (__assign({ start: moment(start), end: moment(end) }, restArgs));
    })
        .reduce(function (acc, appointment) {
        return __spread(acc, filterByViewBoundaries(appointment, leftBound, rightBound, [], false));
    }, [])
        .reduce(function (acc, appointment) { return (__spread(acc, sliceAppointmentByWeek({ left: moment(leftBound), right: moment(rightBound) }, appointment, DAY_COUNT))); }, []); };

    var calculateAllDayDateIntervals = function (appointments, leftBound, rightBound, excludedDays) { return appointments
        .map(function (_a) {
        var start = _a.start, end = _a.end, restArgs = __rest(_a, ["start", "end"]);
        return (__assign({ start: moment(start), end: moment(end) }, restArgs));
    })
        .reduce(function (acc, appointment) {
        return __spread(acc, filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, false));
    }, [])
        .filter(function (appointment) { return allDayPredicate(appointment); })
        .reduce(function (acc, appointment) { return (__spread(acc, sliceAppointmentsByBoundaries(appointment, leftBound, rightBound, excludedDays))); }, []); };

    var allDayRects = function (appointments, startViewDate, endViewDate, excludedDays, viewCellsData, cellElementsMeta) {
        var intervals = calculateAllDayDateIntervals(appointments, startViewDate, endViewDate, excludedDays);
        return calculateRectByDateIntervals({
            growDirection: HORIZONTAL_TYPE,
            multiline: false,
        }, intervals, getHorizontalRectByDates, {
            startViewDate: startViewDate,
            endViewDate: endViewDate,
            viewCellsData: viewCellsData,
            cellElementsMeta: cellElementsMeta,
            excludedDays: excludedDays,
        });
    };
    var verticalTimeTableRects = function (appointments, startViewDate, endViewDate, excludedDays, viewCellsData, cellDuration, cellElementsMeta) {
        var intervals = calculateWeekDateIntervals(appointments, startViewDate, endViewDate, excludedDays);
        return calculateRectByDateIntervals({
            growDirection: VERTICAL_TYPE,
            multiline: false,
        }, intervals, getVerticalRectByDates, {
            startViewDate: startViewDate,
            endViewDate: endViewDate,
            viewCellsData: viewCellsData,
            cellDuration: cellDuration,
            cellElementsMeta: cellElementsMeta,
        });
    };
    var horizontalTimeTableRects = function (appointments, startViewDate, endViewDate, viewCellsData, cellElementsMeta) {
        var intervals = calculateMonthDateIntervals(appointments, startViewDate, endViewDate);
        return calculateRectByDateIntervals({
            growDirection: HORIZONTAL_TYPE,
            multiline: true,
        }, intervals, getHorizontalRectByDates, {
            startViewDate: startViewDate,
            endViewDate: endViewDate,
            viewCellsData: viewCellsData,
            cellElementsMeta: cellElementsMeta,
        });
    };

    var dateTimeFormatInstance = function (locale, formatOptions) { return new Intl.DateTimeFormat(locale, formatOptions); };

    var appointments = function (data) { return data.map(function (appointment) { return (__assign(__assign(__assign(__assign({ start: appointment.startDate, end: appointment.endDate }, appointment.allDay !== undefined && {
        allDay: appointment.allDay,
    }), appointment.rRule !== undefined && {
        rRule: appointment.rRule,
    }), appointment.exDate !== undefined && {
        exDate: appointment.exDate,
    }), { dataItem: appointment })); }); };
    var formatDateTimeGetter = function (locale) {
        var cache = new Map(); // any -> type
        var formatter = function (nextDate, nextOptions) {
            if (nextDate === undefined)
                return '';
            var date = new Date(nextDate);
            var formatInstance = cache.get(nextOptions);
            if (!formatInstance) {
                formatInstance = dateTimeFormatInstance(locale, nextOptions);
                cache.set(nextOptions, formatInstance);
            }
            return formatInstance.format(date);
        };
        return formatter;
    };

    var changeCurrentDate = function (currentDate, _a) {
        var nextDate = _a.nextDate, step = _a.step, amount = _a.amount, direction = _a.direction;
        return (nextDate
            || moment(currentDate)[direction === 'back' ? 'subtract' : 'add'](amount, step)
                .toDate()
            || moment().subtract(amount, step));
    };
    var setCurrentViewName = function (currentViewName, nextViewName) { return nextViewName; };

    var calculateTextByDays = function (startViewDate, endViewDate, formatDate) {
        var momentStartViewDate = moment(startViewDate);
        var momentEndViewDate = moment(endViewDate);
        if (momentStartViewDate.isSame(momentEndViewDate, 'day')) {
            return formatDate(momentStartViewDate.toDate(), DAY_LONG_MONTH_LONG_YEAR_OPTIONS);
        }
        if (momentStartViewDate.isSame(momentEndViewDate, 'year')) {
            if (momentStartViewDate.isSame(momentEndViewDate, 'month')) {
                return formatDate(momentStartViewDate.toDate(), DAY_OPTIONS) + "-" + formatDate(momentEndViewDate.toDate(), DAY_OPTIONS) + " " + formatDate(momentEndViewDate.toDate(), MONTH_YEAR_OPTIONS);
            }
            return formatDate(momentStartViewDate.toDate(), DAY_SHORT_MONTH_OPTIONS) + " - " + formatDate(momentEndViewDate.toDate(), DAY_SHORT_MONTH_LONG_YEAR_OPTIONS);
        }
        return formatDate(momentStartViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS) + " - " + formatDate(momentEndViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS);
    };
    var calculateTextByMonths = function (currentDate, intervalCount, formatDate) {
        var momentCurrentDate = moment(currentDate);
        if (intervalCount === 1) {
            return formatDate(momentCurrentDate.toDate(), MONTH_YEAR_OPTIONS);
        }
        var lastMonth = momentCurrentDate.clone().add(intervalCount - 1, 'month');
        if (momentCurrentDate.isSame(lastMonth, 'year')) {
            return formatDate(momentCurrentDate.toDate(), SHORT_MONTH_OPTIONS) + "-" + formatDate(lastMonth.toDate(), SHORT_MONTH_LONG_YEAR_OPTIONS);
        }
        return formatDate(momentCurrentDate.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS) + " - " + formatDate(lastMonth.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS);
    };
    var viewBoundText = function (startViewDate, endViewDate, step, currentDate, intervalCount, formatDate) { return (step !== 'month'
        ? calculateTextByDays(startViewDate, endViewDate, formatDate)
        : calculateTextByMonths(currentDate, intervalCount, formatDate)); };

    var setAppointmentMeta = function (prevAppointmentMeta, _a) {
        var target = _a.target, data = _a.data;
        return ({ target: target, data: data });
    };

    var OPEN_COMMAND_BUTTON = 'open';
    var CLOSE_COMMAND_BUTTON = 'close';
    var DELETE_COMMAND_BUTTON = 'delete';
    var CANCEL_COMMAND_BUTTON = 'cancel';
    var COMMIT_COMMAND_BUTTON = 'commit';

    var setAppointmentData = function (prevAppointmentData, _a) {
        var appointmentData = _a.appointmentData;
        return appointmentData;
    };

    var callActionIfExists = function (action, payload) {
        if (action) {
            action(payload);
        }
    };
    var isAllDayCell = function (startDate, endDate) { return moment(endDate).diff(moment(startDate), 'days') >= 1; };

    var addAppointment = function (addedAppointmentData, _a) {
        var appointmentData = (_a === void 0 ? { appointmentData: {} } : _a).appointmentData;
        return appointmentData;
    };
    var cancelAddedAppointment = function () { return ({}); };
    var startEditAppointment = function (prevEditingAppointment, appointmentData) { return appointmentData; };
    var stopEditAppointment = function () { return undefined; };
    var changeAppointment = function (appointment, _a) {
        var change = _a.change;
        return (__assign(__assign({}, appointment), change));
    };
    var cancelChanges = function () { return ({}); };

    var changedAppointmentById = function (changes, appointmentId) {
        var _a;
        return (_a = {}, _a[appointmentId] = changes, _a);
    };

    var mergeNewChanges = function (appointmentData, changes) {
        var appointment = __assign({}, appointmentData);
        delete appointment.id;
        delete appointment.rRule;
        delete appointment.exDate;
        delete appointment.parentData;
        return __assign(__assign({}, appointment), changes);
    };
    var reduceExDate = function (prevExDate, boundDate) {
        if (prevExDate.length > 0) {
            return prevExDate.split(',').reduce(function (acc, date) {
                var momentDate = moment.utc(date);
                if (momentDate.isBefore(boundDate)) {
                    return __spread(acc, [date]);
                }
                return acc;
            }, []).join(',');
        }
        return undefined;
    };
    var configureExDate = function (exDate, date) {
        var currentExDate = moment.utc(date).format('YYYYMMDDTHHmmss') + "Z";
        return exDate
            ? exDate + "," + currentExDate
            : currentExDate;
    };
    var configureDateSequence = function (rRule, exDate, options) {
        var rruleSet = new rrule.RRuleSet();
        if (exDate) {
            rruleSet = rrule.rrulestr("EXDATE:" + exDate, { forceset: true });
        }
        rruleSet.rrule(new rrule.RRule(__assign(__assign({}, rrule.RRule.parseString(rRule)), options)));
        return rruleSet.all();
    };
    var configureICalendarRules = function (rRule, options) {
        var rruleSet = new rrule.RRuleSet();
        rruleSet.rrule(new rrule.RRule(__assign(__assign({}, rrule.RRule.parseString(rRule)), options)));
        return rruleSet.valueOf();
    };
    var deleteCurrent = function (appointmentData) {
        var _a;
        var currentSequence = configureDateSequence(appointmentData.rRule, appointmentData.exDate, { dtstart: moment.utc(appointmentData.parentData.startDate).toDate() });
        if (currentSequence.length === 1) {
            return deleteAll(appointmentData);
        }
        var nextExDate = configureExDate(appointmentData.exDate, appointmentData.startDate);
        return { changed: (_a = {}, _a[appointmentData.id] = { exDate: nextExDate }, _a) };
    };
    var deleteAll = function (appointmentData) {
        return { deleted: appointmentData.id };
    };
    var deleteCurrentAndFollowing = function (appointmentData) {
        var _a;
        var rRule = appointmentData.rRule, startDate = appointmentData.startDate, parentData = appointmentData.parentData, _b = appointmentData.exDate, prevExDate = _b === void 0 ? '' : _b, id = appointmentData.id;
        var initialSequence = configureDateSequence(rRule, prevExDate, {
            dtstart: moment.utc(parentData.startDate).toDate(),
        });
        var currentChildIndex = initialSequence
            .findIndex(function (date) { return moment(date).isSame(startDate); });
        if (initialSequence.length === 1 || currentChildIndex === 0) {
            return deleteAll(appointmentData);
        }
        var changedRules = configureICalendarRules(rRule, {
            dtstart: moment.utc(parentData.startDate).toDate(),
            until: moment.utc(initialSequence[currentChildIndex - 1]).toDate(),
            count: null,
        });
        var nextExDate = reduceExDate(prevExDate, startDate);
        return {
            changed: (_a = {},
                _a[id] = __assign({ rRule: changedRules[1].slice(6) }, nextExDate && prevExDate !== nextExDate ? { exDate: nextExDate } : {}),
                _a),
        };
    };
    var editAll = function (changes, appointmentData) {
        var _a, _b;
        var rRule = appointmentData.rRule, id = appointmentData.id;
        var initialRule = new rrule.RRule(rrule.RRule.parseString(rRule));
        if (moment.utc(changes.startDate).isAfter(initialRule.options.until)) {
            return {
                changed: (_a = {},
                    _a[id] = __assign(__assign({}, changes), { rRule: 'FREQ=DAILY;COUNT=1', exDate: '' }),
                    _a),
            };
        }
        return { changed: (_b = {}, _b[appointmentData.id] = changes, _b) };
    };
    var editCurrent = function (changes, appointmentData) {
        var _a;
        return ({
            changed: (_a = {},
                _a[appointmentData.id] = {
                    exDate: configureExDate(appointmentData.exDate, appointmentData.startDate),
                },
                _a),
            added: mergeNewChanges(appointmentData, changes),
        });
    };
    var editCurrentAndFollowing = function (changes, appointmentData) {
        var _a;
        var rRule = appointmentData.rRule, startDate = appointmentData.startDate, parentData = appointmentData.parentData, _b = appointmentData.exDate, prevExDate = _b === void 0 ? '' : _b, id = appointmentData.id;
        var initialRule = new rrule.RRule(rrule.RRule.parseString(rRule));
        var initialSequence = configureDateSequence(rRule, prevExDate, {
            dtstart: moment.utc(parentData.startDate).toDate(),
        });
        var currentChildIndex = initialSequence
            .findIndex(function (date) { return moment(date).isSame(startDate); });
        if (currentChildIndex === 0) {
            return editAll(changes, appointmentData);
        }
        var changedRules = configureICalendarRules(rRule, {
            dtstart: moment.utc(parentData.startDate).toDate(),
            until: moment.utc(initialSequence[currentChildIndex - 1]).toDate(),
            count: null,
        });
        var addedRules = configureICalendarRules(rRule, {
            dtstart: moment.utc(startDate).toDate(),
            count: initialSequence.length - currentChildIndex,
        });
        var nextExDate = reduceExDate(prevExDate, startDate);
        var addedAppointment = moment.utc(changes.startDate).isAfter(initialRule.options.until)
            ? { rRule: 'FREQ=DAILY;COUNT=1', exDate: '' } : { rRule: addedRules[1].slice(6) };
        return {
            changed: (_a = {},
                _a[id] = __assign({ rRule: changedRules[1].slice(6) }, nextExDate && prevExDate !== nextExDate ? { exDate: nextExDate } : {}),
                _a),
            added: __assign(__assign({}, addedAppointment), mergeNewChanges(appointmentData, changes)),
        };
    };
    var preCommitChanges = function (changes, appointmentData, editType) {
        if (changes === null) {
            switch (editType) {
                case RECURRENCE_EDIT_SCOPE.ALL: {
                    return deleteAll(appointmentData);
                }
                case RECURRENCE_EDIT_SCOPE.CURRENT: {
                    return deleteCurrent(appointmentData);
                }
                case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING: {
                    return deleteCurrentAndFollowing(appointmentData);
                }
            }
        }
        else {
            switch (editType) {
                case RECURRENCE_EDIT_SCOPE.ALL: {
                    return editAll(changes, appointmentData);
                }
                case RECURRENCE_EDIT_SCOPE.CURRENT: {
                    return editCurrent(changes, appointmentData);
                }
                case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING: {
                    return editCurrentAndFollowing(changes, appointmentData);
                }
            }
        }
        return {};
    };

    var clamp = function (value, min, max) { return Math.max(Math.min(value, max), min); };
    var calculateInsideOffset = function (targetType, insidePart, cellDurationMinutes) { return targetType === VERTICAL_TYPE
        ? insidePart * cellDurationMinutes * 60 / 2 : 0; };
    var cellType = function (data) { return moment(data.startDate)
        .isSame(data.endDate, 'day') ? VERTICAL_TYPE : HORIZONTAL_TYPE; };
    var intervalDuration = function (data, type) { return moment(data.endDate).diff(data.startDate, type); };
    var cellIndex = function (getCellRects, clientOffset) { return getCellRects.findIndex(function (getCellRect) {
        var _a = getCellRect(), left = _a.left, top = _a.top, right = _a.right, bottom = _a.bottom;
        var isOver = clientOffset
            && clamp(clientOffset.x, left, right) === clientOffset.x
            && clamp(clientOffset.y, top, bottom) === clientOffset.y;
        return isOver;
    }); };
    var cellData = function (timeTableIndex, allDayIndex, viewCellsData) {
        if (allDayIndex !== -1) {
            var allDayCellsData = allDayCells(viewCellsData);
            return allDayCellsData[allDayIndex];
        }
        var firstIndex = Math.floor(timeTableIndex / viewCellsData[0].length);
        var secondIndex = timeTableIndex % viewCellsData[0].length;
        return viewCellsData[firstIndex][secondIndex];
    };
    var autoScroll = function (clientOffset, scrollingStrategy) {
        if ((clientOffset.y < scrollingStrategy.topBoundary + SCROLL_OFFSET)
            && (clientOffset.y > scrollingStrategy.topBoundary)) {
            scrollingStrategy.changeVerticalScroll(-SCROLL_SPEED_PX);
        }
        if (scrollingStrategy.bottomBoundary - SCROLL_OFFSET < clientOffset.y) {
            scrollingStrategy.changeVerticalScroll(+SCROLL_SPEED_PX);
        }
    };
    var timeBoundariesByResize = function (payload, targetData, targetType, cellDurationMinutes, insidePart) {
        if (targetType !== payload.appointmentType) {
            return { appointmentStartTime: undefined, appointmentEndTime: undefined };
        }
        var appointmentStartTime;
        var appointmentEndTime;
        var sourceType = payload.type;
        if (sourceType === RESIZE_TOP) {
            var insideTopOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);
            appointmentStartTime = moment(targetData.startDate)
                .add(insideTopOffset, SECONDS).toDate();
            appointmentEndTime = new Date(payload.endDate);
        }
        if (sourceType === RESIZE_BOTTOM) {
            var insideBottomOffset = insidePart === 0 && targetType === VERTICAL_TYPE
                ? cellDurationMinutes * 60 / 2 : 0;
            appointmentEndTime = moment(targetData.endDate)
                .add(-insideBottomOffset, SECONDS).toDate();
            appointmentStartTime = new Date(payload.startDate);
        }
        // keep origin appointment duration if coordinates are wrong
        if (moment(appointmentEndTime).diff(appointmentStartTime, MINUTES) < 1) {
            appointmentStartTime = new Date(payload.startDate);
            appointmentEndTime = new Date(payload.endDate);
        }
        return { appointmentStartTime: appointmentStartTime, appointmentEndTime: appointmentEndTime };
    };
    var timeBoundariesByDrag = function (payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase) {
        if (targetType === HORIZONTAL_TYPE
            && intervalDuration(payload, SECONDS) < intervalDuration(targetData, SECONDS)) {
            return {
                appointmentStartTime: targetData.startDate,
                appointmentEndTime: targetData.endDate,
                offsetTimeTop: 0,
            };
        }
        var offsetTimeTop;
        var appointmentStartTime;
        var appointmentEndTime;
        var insideOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);
        var start = moment(targetData.startDate).add(insideOffset, SECONDS);
        if (offsetTimeTopBase === null) {
            offsetTimeTop = moment(targetData.startDate)
                .diff(payload.startDate, SECONDS) + insideOffset;
        }
        else {
            offsetTimeTop = offsetTimeTopBase;
        }
        if (payload.type === targetType) {
            var appointmentDurationSeconds = intervalDuration(payload, SECONDS);
            appointmentStartTime = moment(start).add((offsetTimeTop) * (-1), SECONDS).toDate();
            appointmentEndTime = moment(start)
                .add((appointmentDurationSeconds - offsetTimeTop), SECONDS).toDate();
        }
        else {
            appointmentStartTime = moment(targetData.startDate)
                .add(insideOffset, SECONDS).toDate();
            appointmentEndTime = moment(targetData.endDate).add(insideOffset, SECONDS).toDate();
        }
        return { appointmentStartTime: appointmentStartTime, appointmentEndTime: appointmentEndTime, offsetTimeTop: offsetTimeTop };
    };
    var calculateAppointmentTimeBoundaries = function (payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase) {
        var isDragging = (payload.type === VERTICAL_TYPE || payload.type === HORIZONTAL_TYPE);
        return (isDragging
            ? timeBoundariesByDrag(payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase)
            : timeBoundariesByResize(payload, targetData, targetType, cellDurationMinutes, insidePart));
    };
    var calculateInsidePart = function (top, timeTableCellsRects, timeTableIndex) {
        if (timeTableIndex !== undefined && timeTableIndex !== -1) {
            var cellRect = timeTableCellsRects[timeTableIndex]();
            return top > cellRect.top + cellRect.height / 2 ? 1 : 0;
        }
        return 0;
    };
    var calculateDraftAppointments = function (allDayIndex, draftAppointments, startViewDate, endViewDate, excludedDays, viewCellsData, getAllDayCellsElementRects, targetType, cellDurationMinutes, getTableCellElementRects) {
        if (allDayIndex !== -1 || (targetType === VERTICAL_TYPE
            && getAllDayCellsElementRects.getCellRects.length
            && intervalDuration(draftAppointments[0].dataItem, HOURS) > 23)) {
            var allDayDrafts = draftAppointments.map(function (draftAppt) { return (__assign(__assign({}, draftAppt), { allDay: true })); });
            return {
                allDayDraftAppointments: allDayRects(allDayDrafts, startViewDate, endViewDate, excludedDays, viewCellsData, getAllDayCellsElementRects),
                timeTableDraftAppointments: [],
            };
        }
        if (targetType === VERTICAL_TYPE || allDayIndex !== -1) {
            return {
                allDayDraftAppointments: [],
                timeTableDraftAppointments: verticalTimeTableRects(draftAppointments, startViewDate, endViewDate, excludedDays, viewCellsData, cellDurationMinutes, getTableCellElementRects),
            };
        }
        return {
            allDayDraftAppointments: [],
            timeTableDraftAppointments: horizontalTimeTableRects(draftAppointments, startViewDate, endViewDate, viewCellsData, getTableCellElementRects),
        };
    };

    exports.AUTO_HEIGHT = AUTO_HEIGHT;
    exports.CANCEL_COMMAND_BUTTON = CANCEL_COMMAND_BUTTON;
    exports.CLOSE_COMMAND_BUTTON = CLOSE_COMMAND_BUTTON;
    exports.COMMIT_COMMAND_BUTTON = COMMIT_COMMAND_BUTTON;
    exports.DAY_LONG_MONTH_LONG_YEAR_OPTIONS = DAY_LONG_MONTH_LONG_YEAR_OPTIONS;
    exports.DAY_OPTIONS = DAY_OPTIONS;
    exports.DAY_SHORT_MONTH_LONG_YEAR_OPTIONS = DAY_SHORT_MONTH_LONG_YEAR_OPTIONS;
    exports.DAY_SHORT_MONTH_OPTIONS = DAY_SHORT_MONTH_OPTIONS;
    exports.DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS = DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS;
    exports.DELETE_COMMAND_BUTTON = DELETE_COMMAND_BUTTON;
    exports.HORIZONTAL_TYPE = HORIZONTAL_TYPE;
    exports.HOURS = HOURS;
    exports.HOUR_MINUTE_OPTIONS = HOUR_MINUTE_OPTIONS;
    exports.MINUTES = MINUTES;
    exports.MONTH_YEAR_OPTIONS = MONTH_YEAR_OPTIONS;
    exports.OPEN_COMMAND_BUTTON = OPEN_COMMAND_BUTTON;
    exports.POSITION_END = POSITION_END;
    exports.POSITION_START = POSITION_START;
    exports.RECURRENCE_EDIT_SCOPE = RECURRENCE_EDIT_SCOPE;
    exports.RESIZE_BOTTOM = RESIZE_BOTTOM;
    exports.RESIZE_TOP = RESIZE_TOP;
    exports.SCROLL_OFFSET = SCROLL_OFFSET;
    exports.SCROLL_SPEED_PX = SCROLL_SPEED_PX;
    exports.SECONDS = SECONDS;
    exports.SHORT_MONTH_LONG_YEAR_OPTIONS = SHORT_MONTH_LONG_YEAR_OPTIONS;
    exports.SHORT_MONTH_OPTIONS = SHORT_MONTH_OPTIONS;
    exports.SHORT_MONTH_SHORT_YEAR_OPTIONS = SHORT_MONTH_SHORT_YEAR_OPTIONS;
    exports.VERTICAL_TYPE = VERTICAL_TYPE;
    exports.WEEK_DAY_OPTIONS = WEEK_DAY_OPTIONS;
    exports.addAppointment = addAppointment;
    exports.adjustAppointments = adjustAppointments;
    exports.allDayCells = allDayCells;
    exports.allDayPredicate = allDayPredicate;
    exports.allDayRects = allDayRects;
    exports.appointments = appointments;
    exports.autoScroll = autoScroll;
    exports.availableViews = availableViews;
    exports.calculateAllDayDateIntervals = calculateAllDayDateIntervals;
    exports.calculateAppointmentTimeBoundaries = calculateAppointmentTimeBoundaries;
    exports.calculateDraftAppointments = calculateDraftAppointments;
    exports.calculateFirstDateOfWeek = calculateFirstDateOfWeek;
    exports.calculateInsidePart = calculateInsidePart;
    exports.calculateMonthDateIntervals = calculateMonthDateIntervals;
    exports.calculateRectByDateIntervals = calculateRectByDateIntervals;
    exports.calculateWeekDateIntervals = calculateWeekDateIntervals;
    exports.callActionIfExists = callActionIfExists;
    exports.cancelAddedAppointment = cancelAddedAppointment;
    exports.cancelChanges = cancelChanges;
    exports.cellData = cellData;
    exports.cellIndex = cellIndex;
    exports.cellType = cellType;
    exports.changeAppointment = changeAppointment;
    exports.changeCurrentDate = changeCurrentDate;
    exports.changedAppointmentById = changedAppointmentById;
    exports.computed = computed;
    exports.dayBoundaryPredicate = dayBoundaryPredicate;
    exports.dayScale = dayScale;
    exports.deleteAll = deleteAll;
    exports.deleteCurrent = deleteCurrent;
    exports.deleteCurrentAndFollowing = deleteCurrentAndFollowing;
    exports.editAll = editAll;
    exports.editCurrent = editCurrent;
    exports.editCurrentAndFollowing = editCurrentAndFollowing;
    exports.endViewDate = endViewDate;
    exports.filterByViewBoundaries = filterByViewBoundaries;
    exports.findOverlappedAppointments = findOverlappedAppointments;
    exports.formatDateTimeGetter = formatDateTimeGetter;
    exports.getAllDayCellIndexByDate = getAllDayCellIndexByDate;
    exports.getAppointmentStyle = getAppointmentStyle;
    exports.getCellByDate = getCellByDate;
    exports.getHorizontalRectByDates = getHorizontalRectByDates;
    exports.getMonthCellIndexByDate = getMonthCellIndexByDate;
    exports.getVerticalRectByDates = getVerticalRectByDates;
    exports.getViewType = getViewType;
    exports.horizontalTimeTableRects = horizontalTimeTableRects;
    exports.intervalDuration = intervalDuration;
    exports.isAllDayCell = isAllDayCell;
    exports.monthCellsData = monthCellsData;
    exports.preCommitChanges = preCommitChanges;
    exports.reduceAppointmentByDayBounds = reduceAppointmentByDayBounds;
    exports.setAppointmentData = setAppointmentData;
    exports.setAppointmentMeta = setAppointmentMeta;
    exports.setCurrentViewName = setCurrentViewName;
    exports.sliceAppointmentByDay = sliceAppointmentByDay;
    exports.sliceAppointmentByWeek = sliceAppointmentByWeek;
    exports.sliceAppointmentsByBoundaries = sliceAppointmentsByBoundaries;
    exports.sortAppointments = sortAppointments;
    exports.startEditAppointment = startEditAppointment;
    exports.startViewDate = startViewDate;
    exports.stopEditAppointment = stopEditAppointment;
    exports.timeBoundariesByDrag = timeBoundariesByDrag;
    exports.timeBoundariesByResize = timeBoundariesByResize;
    exports.timeScale = timeScale;
    exports.toPercentage = toPercentage;
    exports.unwrapGroups = unwrapGroups;
    exports.verticalTimeTableRects = verticalTimeTableRects;
    exports.viewBoundText = viewBoundText;
    exports.viewCellsData = viewCellsData;
    exports.viewPredicate = viewPredicate;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=dx-scheduler-core.umd.js.map
