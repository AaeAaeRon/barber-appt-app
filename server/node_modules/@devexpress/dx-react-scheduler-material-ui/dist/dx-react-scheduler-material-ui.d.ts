import * as React from 'react';
import {
  AppointmentModel,
  AppointmentMeta
} from '@devexpress/dx-react-scheduler';

// -------------------------------------------------------------------------------------------------
// AllDayPanel
// -------------------------------------------------------------------------------------------------

import {
  AllDayPanel as AllDayPanelBase,
} from '@devexpress/dx-react-scheduler';


export namespace AllDayPanel {
  /** Describes a cell data configuration object. */
  export type CellData = AllDayPanelBase.CellData;
}

export namespace AllDayPanel {
  /** Describes properties passed to a component that renders an All Day panel layout. */
  export type LayoutProps = AllDayPanelBase.LayoutProps;
}

export namespace AllDayPanel {
  /** Describes properties passed to a component that renders an All Day panel cell. */
  export type CellProps = AllDayPanelBase.CellProps;
}

export namespace AllDayPanel {
  /** Describes properties passed to a component that renders an All Day panel row. */
  export type RowProps = AllDayPanelBase.RowProps;
}

export namespace AllDayPanel {
  /** Describes properties passed to a component that renders a title cell. */
  export type TitleCellProps = AllDayPanelBase.TitleCellProps;
}

export namespace AllDayPanel {
  /** Describes properties passed to a component that renders the appointment layer. */
  export type AppointmentLayerProps = AllDayPanelBase.AppointmentLayerProps;
}

export namespace AllDayPanel {
  /** Describes properties passed to a component that renders an All Day panel container. */
  export type ContainerProps = AllDayPanelBase.ContainerProps;
}

export interface AllDayPanelProps {
  /** A component that renders an All Day panel layout. */
  layoutComponent?: React.ComponentType<AllDayPanelBase.LayoutProps>;
  /** A component that renders an All Day panel cell. */
  cellComponent?: React.ComponentType<AllDayPanelBase.CellProps>;
  /** A component that renders an All Day panel row. */
  rowComponent?: React.ComponentType<AllDayPanelBase.RowProps>;
  /** A component that renders a title cell. */
  titleCellComponent?: React.ComponentType<AllDayPanelBase.TitleCellProps>;
  /** A component that renders the appointment layer. */
  appointmentLayerComponent?: React.ComponentType<AllDayPanelBase.AppointmentLayerProps>;
  /** A component that renders an All Day panel container. */
  containerComponent?: React.ComponentType<AllDayPanelBase.ContainerProps>;
  /** An object that specifies localization messages. */
  messages?: AllDayPanelBase.LocalizationMessages;
}

/** A plugin that renders the All Day Panel. */
export declare const AllDayPanel: React.ComponentType<AllDayPanelProps> & {
  /** A component that renders an All Day panel layout. */
  Layout: React.ComponentType<React.ComponentType<AllDayPanelBase.LayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders an All Day panel cell. */
  Cell: React.ComponentType<React.ComponentType<AllDayPanelBase.CellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders an All Day panel row. */
  Row: React.ComponentType<React.ComponentType<AllDayPanelBase.RowProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a title cell. */
  TitleCell: React.ComponentType<React.ComponentType<AllDayPanelBase.TitleCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the appointment layer. */
  AppointmentLayer: React.ComponentType<React.ComponentType<AllDayPanelBase.AppointmentLayerProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders an All Day panel container. */
  Container: React.ComponentType<React.ComponentType<AllDayPanelBase.ContainerProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// AppointmentForm
// -------------------------------------------------------------------------------------------------

import {
  AppointmentForm as AppointmentFormBase,
} from '@devexpress/dx-react-scheduler';


export namespace AppointmentForm {
  /** Properties passed to a component that renders the appointment form's popup. */
  export type PopupProps = AppointmentFormBase.PopupProps;
}

export namespace AppointmentForm {
  /** Properties passed to a component that renders the appointment form's container. */
  export type ContainerProps = AppointmentFormBase.ContainerProps;
}

export namespace AppointmentForm {
  /** Properties passed to a component that renders the appointment form's scrollable area. */
  export type ScrollableAreaProps = AppointmentFormBase.ScrollableAreaProps;
}

export namespace AppointmentForm {
  /** Properties passed to a component that renders the appointment form's static area. */
  export type StaticAreaProps = AppointmentFormBase.StaticAreaProps;
}

export interface AppointmentFormProps {
  /** Specifies the appointment form's visibility. */
  visible?: boolean;
  /** Handles changes to the appointment form's visibility. */
  onVisibilityChange?: (visible: boolean) => void;
  /** Specifies the appointment's data that the form displays. */
  appointmentData?: AppointmentModel;
  /** Handles changes to the appointment's data. */
  onAppointmentDataChange?: (appointmentData: AppointmentModel) => void;
  /** Specifies the appointment form is read-only. */
  readOnly?: boolean;
  /** A component that renders the appointment form's popup. */
  popupComponent?: React.ComponentType<AppointmentFormBase.PopupProps>;
  /** A component that renders the appointment form's container. */
  containerComponent?: React.ComponentType<AppointmentFormBase.ContainerProps>;
  /** A component that renders the appointment form's scrollable area. */
  scrollableAreaComponent?: React.ComponentType<AppointmentFormBase.ScrollableAreaProps>;
  /** A component that renders the appointment form's static area. */
  staticAreaComponent?: React.ComponentType<AppointmentFormBase.StaticAreaProps>;
  /** An object that specifies localization messages. */
  messages?: AppointmentFormBase.LocalizationMessages;
}

/** The AppointmentForm plugin renders a form that visualizes appointment's data and allows a user to modify this data. */
export declare const AppointmentForm: React.ComponentType<AppointmentFormProps> & {
  /** A component that renders the appointment form's popup. */
  Popup: React.ComponentType<AppointmentFormBase.PopupProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the appointment form's container. */
  Container: React.ComponentType<AppointmentFormBase.ContainerProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the appointment form's scrollable area. */
  ScrollableArea: React.ComponentType<AppointmentFormBase.ScrollableAreaProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the appointment form's static area. */
  StaticArea: React.ComponentType<AppointmentFormBase.StaticAreaProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// AppointmentTooltip
// -------------------------------------------------------------------------------------------------

import {
  AppointmentTooltip as AppointmentTooltipBase,
} from '@devexpress/dx-react-scheduler';


export namespace AppointmentTooltip {
  /** Describes properties passed to a component that renders a tooltip layout. */
  export type LayoutProps = AppointmentTooltipBase.LayoutProps;
}

export namespace AppointmentTooltip {
  /** Describes properties passed to a component that renders the tooltip header. */
  export type HeaderProps = AppointmentTooltipBase.HeaderProps;
}

export namespace AppointmentTooltip {
  /** Describes properties passed to a component that renders the tooltip content. */
  export type ContentProps = AppointmentTooltipBase.ContentProps;
}

export namespace AppointmentTooltip {
  /** Describes properties passed to a component that renders a command button. */
  export type CommandButtonProps = AppointmentTooltipBase.CommandButtonProps;
}

export interface AppointmentTooltipProps {
  /** Specifies the Open button's visibility. */
  showOpenButton?: boolean;
  /** Specifies the Close button's visibility. */
  showCloseButton?: boolean;
  /** Specifies the Delete button's visibility. */
  showDeleteButton?: boolean;
  /** Specifies the tooltip's visibility. */
  visible?: boolean;
  /** The appointment's displayed metadata. */
  appointmentMeta?: AppointmentMeta;
  /** Handles the tooltip's visibility chages. */
  onVisibilityChange?: (visible: boolean) => void;
  /** Handles the meta data changes. */
  onAppointmentMetaChange?: (appointmentMeta: AppointmentMeta) => void;
  /** A component that renders the tooltip layout. */
  layoutComponent?: React.ComponentType<AppointmentTooltipBase.LayoutProps>;
  /** A component that renders the header. */
  headerComponent?: React.ComponentType<AppointmentTooltipBase.HeaderProps>;
  /** A component that renders the tooltip content. */
  contentComponent?: React.ComponentType<AppointmentTooltipBase.ContentProps>;
  /** A component that renders a command button. */
  commandButtonComponent?: React.ComponentType<AppointmentTooltipBase.CommandButtonProps>;
}

/** The `AppointmentTooltip` plugin allows you to display information about an appointment in a tooltip. */
export declare const AppointmentTooltip: React.ComponentType<AppointmentTooltipProps> & {
  /** A component that renders the tooltip layout. */
  Layout: React.ComponentType<React.ComponentType<AppointmentTooltipBase.LayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the tooltip header. */
  Header: React.ComponentType<React.ComponentType<AppointmentTooltipBase.HeaderProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the tooltip content. */
  Content: React.ComponentType<React.ComponentType<AppointmentTooltipBase.ContentProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a command button. */
  CommandButton: React.ComponentType<React.ComponentType<AppointmentTooltipBase.CommandButtonProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// Appointments
// -------------------------------------------------------------------------------------------------

import {
  Appointments as AppointmentsBase,
} from '@devexpress/dx-react-scheduler';


export namespace Appointments {
  /** Properties passed to a component that renders an appointment. */
  export type AppointmentProps = AppointmentsBase.AppointmentProps;
}

export namespace Appointments {
  /** Properties passed to a component that renders the appointment content. */
  export type AppointmentContentProps = AppointmentsBase.AppointmentContentProps;
}

export namespace Appointments {
  /** Properties passed to a component that renders an element which indicates the appointment is divided. */
  export type SplitIndicatorProps = AppointmentsBase.SplitIndicatorProps;
}

export namespace Appointments {
  /** Properties passed to a component that renders a container for the appointment. */
  export type ContainerProps = AppointmentsBase.ContainerProps;
}

export interface AppointmentsProps {
  /** A component that renders an appointment. */
  appointmentComponent?: React.ComponentType<AppointmentsBase.AppointmentProps>;
  /** A component that renders the appointment content. */
  appointmentContentComponent?: React.ComponentType<AppointmentsBase.AppointmentContentProps>;
  /** A component that renders an element which indicates the appointment is divided. */
  splitIndicatorComponent?: React.ComponentType<AppointmentsBase.SplitIndicatorProps>;
  /** A component that renders an icon for recurring appointments. */
  recurringIconComponent?: React.ComponentType<object>;
  /** A component that renders a container for the appointment. */
  containerComponent?: React.ComponentType<AppointmentsBase.ContainerProps>;
}

/** A plugin that renders appointments. */
export declare const Appointments: React.ComponentType<AppointmentsProps> & {
  /** A component that renders an appointment. */
  Appointment: React.ComponentType<AppointmentsBase.AppointmentProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the appointment content. */
  AppointmentContent: React.ComponentType<AppointmentsBase.AppointmentContentProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders an element which indicates the appointment is divided. */
  SplitIndicator: React.ComponentType<AppointmentsBase.SplitIndicatorProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a container for the appointment. */
  Container: React.ComponentType<AppointmentsBase.ContainerProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// DateNavigator
// -------------------------------------------------------------------------------------------------

import {
  DateNavigator as DateNavigatorBase,
} from '@devexpress/dx-react-scheduler';


export namespace DateNavigator {
  /** Properties passed to a component that renders the date navigator's root element. */
  export type RootProps = DateNavigatorBase.RootProps;
}

export namespace DateNavigator {
  /** Properties passed to a component that renders the date navigator's overlay element. */
  export type OverlayProps = DateNavigatorBase.OverlayProps;
}

export namespace DateNavigator {
  /** Properties passed to a component that renders the date navigator's open button. */
  export type OpenButtonProps = DateNavigatorBase.OpenButtonProps;
}

export namespace DateNavigator {
  /** Properties passed to a component that renders the date navigator's navigation button. */
  export type NavigationButtonProps = DateNavigatorBase.NavigationButtonProps;
}

export interface DateNavigatorProps {
  /** A component that renders the date navigator's root element. */
  rootComponent?: React.ComponentType<DateNavigatorBase.RootProps>;
  /** A component that renders the date navigator's overlay element. */
  overlayComponent?: React.ComponentType<DateNavigatorBase.OverlayProps>;
  /** A component that renders a button that invokes the date navigator. */
  openButtonComponent?: React.ComponentType<DateNavigatorBase.OpenButtonProps>;
  /** A component that renders the date navigator's navigation buttons. */
  navigationButtonComponent?: React.ComponentType<DateNavigatorBase.NavigationButtonProps>;
}

/** A plugin that renders the Scheduler's date navigator. */
export declare const DateNavigator: React.ComponentType<DateNavigatorProps> & {
  /** A component that renders the date navigator's root element. */
  Root: React.ComponentType<DateNavigatorBase.RootProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the date navigator's overlay element. */
  Overlay: React.ComponentType<DateNavigatorBase.OverlayProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a button that invokes the date navigator. */
  OpenButton: React.ComponentType<DateNavigatorBase.OpenButtonProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the date navigator's navigation buttons. */
  NavigationButton: React.ComponentType<DateNavigatorBase.NavigationButtonProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// DayView
// -------------------------------------------------------------------------------------------------

import {
  DayView as DayViewBase,
} from '@devexpress/dx-react-scheduler';


export namespace DayView {
  /** Describes a cell data configuration object. */
  export type CellData = DayViewBase.CellData;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a day view layout. */
  export type LayoutProps = DayViewBase.LayoutProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a time scale layout. */
  export type TimeScaleLayoutProps = DayViewBase.TimeScaleLayoutProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a time scale cell. */
  export type TimeScaleCellProps = DayViewBase.TimeScaleCellProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a day scale layout. */
  export type DayScaleLayoutProps = DayViewBase.DayScaleLayoutProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a day scale cell. */
  export type DayScaleCellProps = DayViewBase.DayScaleCellProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a day scale empty cell. */
  export type DayScaleEmptyCellProps = DayViewBase.DayScaleEmptyCellProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a time table layout. */
  export type TimeTableLayoutProps = DayViewBase.TimeTableLayoutProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a time table cell. */
  export type TimeTableCellProps = DayViewBase.TimeTableCellProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders the appointment layer. */
  export type AppointmentLayerProps = DayViewBase.AppointmentLayerProps;
}

export namespace DayView {
  /** Describes properties passed to a component that renders a day view row. */
  export type RowProps = DayViewBase.RowProps;
}

export interface DayViewProps {
  /** The view's unique identifier. Required if you use several `DayView` plugins. */
  name?: string;
  /** The view's name used in UI plugins. The default value is `name`. */
  displayName?: string;
  /** Multiplies the default view interval. */
  intervalCount?: number;
  /** Specifies the cell's duration in minutes. */
  cellDuration?: number;
  /** Specifies the start hour of the view time scale. */
  startDayHour?: number;
  /** Specifies the end hour of the view time scale. */
  endDayHour?: number;
  /** A component that renders a day view layout. */
  layoutComponent?: React.ComponentType<DayViewBase.LayoutProps>;
  /** A component that renders a time scale layout. */
  timeScaleLayoutComponent?: React.ComponentType<DayViewBase.TimeScaleLayoutProps>;
  /** A component that renders a time scale row. */
  timeScaleRowComponent?: React.ComponentType<DayViewBase.RowProps>;
  /** A component that renders a time scale cell. */
  timeScaleCellComponent?: React.ComponentType<DayViewBase.TimeScaleCellProps>;
  /** A component that renders a day scale layout. */
  dayScaleLayoutComponent?: React.ComponentType<DayViewBase.DayScaleLayoutProps>;
  /** A component that renders a day scale cell. */
  dayScaleCellComponent?: React.ComponentType<DayViewBase.DayScaleCellProps>;
  /** A component that renders a day scale row. */
  dayScaleRowComponent?: React.ComponentType<DayViewBase.RowProps>;
  /** A component that renders a day scale empty cell. */
  dayScaleEmptyCellComponent?: React.ComponentType<DayViewBase.DayScaleEmptyCellProps>;
  /** A component that renders a time table layout. */
  timeTableLayoutComponent?: React.ComponentType<DayViewBase.TimeTableLayoutProps>;
  /** A component that renders a time table cell. */
  timeTableCellComponent?: React.ComponentType<DayViewBase.TimeTableCellProps>;
  /** A component that renders a time table row. */
  timeTableRowComponent?: React.ComponentType<DayViewBase.RowProps>;
  /** A component that renders the appointment layer. */
  appointmentLayerComponent?: React.ComponentType<DayViewBase.AppointmentLayerProps>;
}

/** A plugin that renders Scheduler data for a day. This plugin arranges appointments from top to bottom. If their time intervals overlap, their width is decreased and they are placed next to each other. */
export declare const DayView: React.ComponentType<DayViewProps> & {
  /** A component that renders a day view layout. */
  Layout: React.ComponentType<React.ComponentType<DayViewBase.LayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time scale layout. */
  TimeScaleLayout: React.ComponentType<React.ComponentType<DayViewBase.TimeScaleLayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time scale cell. */
  TimeScaleCell: React.ComponentType<React.ComponentType<DayViewBase.TimeScaleCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day scale layout. */
  DayScaleLayout: React.ComponentType<React.ComponentType<DayViewBase.DayScaleLayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day scale cell. */
  DayScaleCell: React.ComponentType<React.ComponentType<DayViewBase.DayScaleCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day scale empty cell. */
  DayScaleEmptyCell: React.ComponentType<React.ComponentType<DayViewBase.DayScaleEmptyCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time table layout. */
  TimeTableLayout: React.ComponentType<React.ComponentType<DayViewBase.TimeTableLayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time table cell. */
  TimeTableCell: React.ComponentType<React.ComponentType<DayViewBase.TimeTableCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day view's generic row. */
  Row: React.ComponentType<React.ComponentType<DayViewBase.RowProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the appointment layer. */
  AppointmentLayer: React.ComponentType<React.ComponentType<DayViewBase.AppointmentLayerProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// DragDropProvider
// -------------------------------------------------------------------------------------------------

import {
  DragDropProvider as DragDropProviderBase,
} from '@devexpress/dx-react-scheduler';


export namespace DragDropProvider {
  /** Describes properties of the component that renders the appointment being dragged. */
  export type DraftAppointmentProps = DragDropProviderBase.DraftAppointmentProps;
}

export namespace DragDropProvider {
  /** Describes properties of the component that renders a copy of the appointment being dragged in its previous location. */
  export type SourceAppointmentProps = DragDropProviderBase.SourceAppointmentProps;
}

export namespace DragDropProvider {
  /** Describes properties of the component that renders a handle used to resize the appointment. */
  export type ResizeProps = DragDropProviderBase.ResizeProps;
}

export namespace DragDropProvider {
  /** Describes properties of the component that renders a container for the appointment being dragged. */
  export type ContainerProps = DragDropProviderBase.ContainerProps;
}

export interface DragDropProviderProps {
  /** A function that specifies draggable appointments. */
  allowDrag?: (appointmentData: AppointmentModel) => boolean;
  /** A function that specifies resizable appointments. */
  allowResize?: (appointmentData: AppointmentModel) => boolean;
  /** A component that renders the appointment being dragged. */
  draftAppointmentComponent?: React.ComponentType<DragDropProviderBase.DraftAppointmentProps>;
  /** A component that renders a copy of the appointment being dragged in its previous location. */
  sourceAppointmentComponent?: React.ComponentType<DragDropProviderBase.SourceAppointmentProps>;
  /** A component that renders a handle used to resize the appointment. */
  resizeComponent?: React.ComponentType<DragDropProviderBase.ResizeProps>;
  /** A component that renders a container for the appointment being dragged. */
  containerComponent?: React.ComponentType<DragDropProviderBase.ContainerProps>;
}

/** A plugin that enables users to edit appointments via drag-and-drop. */
export declare const DragDropProvider: React.ComponentType<DragDropProviderProps> & {
  /** A component that renders the appointment being dragged. */
  DraftAppointment: React.ComponentType<DragDropProviderBase.DraftAppointmentProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a copy of the appointment being dragged in its previous location. */
  SourceAppointment: React.ComponentType<DragDropProviderBase.SourceAppointmentProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the handle of the appointment being resized. */
  Resize: React.ComponentType<DragDropProviderBase.ResizeProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a container for the appointment being dragged. */
  Container: React.ComponentType<DragDropProviderBase.ContainerProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// EditRecurrenceMenu
// -------------------------------------------------------------------------------------------------

import {
  EditRecurrenceMenu as EditRecurrenceMenuBase,
} from '@devexpress/dx-react-scheduler';


export namespace EditRecurrenceMenu {
  /** Properties passed to a component that renders the edit menu's layout. */
  export type LayoutProps = EditRecurrenceMenuBase.LayoutProps;
}

export namespace EditRecurrenceMenu {
  /** Properties passed to a component that renders the overlay window. */
  export type OverlayProps = EditRecurrenceMenuBase.OverlayProps;
}

export namespace EditRecurrenceMenu {
  /** Properties passed to a component that renders the OK and Cancel buttons. */
  export type ButtonProps = EditRecurrenceMenuBase.ButtonProps;
}

export interface EditRecurrenceMenuProps {
  /** A component that renders the menu's layout. */
  layoutComponent?: React.ComponentType<EditRecurrenceMenuBase.LayoutProps>;
  /** A component that renders the overlay window. */
  overlayComponent?: React.ComponentType<EditRecurrenceMenuBase.OverlayProps>;
  /** A component that renders the OK and Cancel buttons. */
  buttonComponent?: React.ComponentType<EditRecurrenceMenuBase.ButtonProps>;
  /** An object that contains localized messages. */
  messages?: React.ComponentType<EditRecurrenceMenuBase.LocalizationMessages>;
}

/** A plugin that renders the menu that allows users to edit recurrent appointments. Should not be used with the IntegratedEditing plugin. */
export declare const EditRecurrenceMenu: React.ComponentType<EditRecurrenceMenuProps> & {
  /** A component that renders the edit menu's layout. */
  Layout: React.ComponentType<EditRecurrenceMenuBase.LayoutProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the overlay window. */
  Overlay: React.ComponentType<EditRecurrenceMenuBase.OverlayProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the OK and Cancel buttons. */
  Button: React.ComponentType<EditRecurrenceMenuBase.ButtonProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// MonthView
// -------------------------------------------------------------------------------------------------

import {
  MonthView as MonthViewBase,
} from '@devexpress/dx-react-scheduler';


export namespace MonthView {
  /** Describes a cell data configuration object. */
  export type CellData = MonthViewBase.CellData;
}

export namespace MonthView {
  /** Describes properties passed to a component that renders a month view layout. */
  export type LayoutProps = MonthViewBase.LayoutProps;
}

export namespace MonthView {
  /** Describes properties passed to a component that renders a day scale layout. */
  export type DayScaleLayoutProps = MonthViewBase.DayScaleLayoutProps;
}

export namespace MonthView {
  /** Describes properties passed to a component that renders a day scale cell. */
  export type DayScaleCellProps = MonthViewBase.DayScaleCellProps;
}

export namespace MonthView {
  /** Describes properties passed to a component that renders a time table layout. */
  export type TimeTableLayoutProps = MonthViewBase.TimeTableLayoutProps;
}

export namespace MonthView {
  /** Describes properties passed to a component that renders a time scale cell. */
  export type TimeTableCellProps = MonthViewBase.TimeTableCellProps;
}

export namespace MonthView {
  /** Describes properties passed to a component that renders the appointment layer. */
  export type AppointmentLayerProps = MonthViewBase.AppointmentLayerProps;
}

export namespace MonthView {
  /** Describes properties passed to a component that renders a row. */
  export type RowProps = MonthViewBase.RowProps;
}

export interface MonthViewProps {
  /** The view's unique identifier. Required if you use several `MonthView` plugins. */
  name?: string;
  /** The view's name used in UI plugins. The default value is equal to `name`. */
  displayName?: string;
  /** Specifies first day of week. */
  firstDayOfWeek?: number;
  /** Multiplies the default view interval. */
  intervalCount?: number;
  /** A component that renders a month view layout. */
  layoutComponent?: React.ComponentType<MonthViewBase.LayoutProps>;
  /** A component that renders a day scale layout. */
  dayScaleLayoutComponent?: React.ComponentType<MonthViewBase.DayScaleLayoutProps>;
  /** A component that renders a day scale cell. */
  dayScaleCellComponent?: React.ComponentType<MonthViewBase.DayScaleCellProps>;
  /** A component that renders a day scale row. */
  dayScaleRowComponent?: React.ComponentType<MonthViewBase.RowProps>;
  /** A component that renders a time table layout. */
  timeTableLayoutComponent?: React.ComponentType<MonthViewBase.TimeTableLayoutProps>;
  /** A component that renders a time table cell. */
  timeTableCellComponent?: React.ComponentType<MonthViewBase.TimeTableCellProps>;
  /** A component that renders a time table row. */
  timeTableRowComponent?: React.ComponentType<MonthViewBase.RowProps>;
  /** A component that renders the appointment layer. */
  appointmentLayerComponent?: React.ComponentType<MonthViewBase.AppointmentLayerProps>;
}

/** A plugin that renders Scheduler data for a month. This plugin arranges appointments from left to right. An appointment's size depends on its duration in days. However, it occupies the entire day cell if an appointment lasts only for several hours or minutes. The time scale and all-day panel are not available in this view. */
export declare const MonthView: React.ComponentType<MonthViewProps> & {
  /** A component that renders a month view layout. */
  Layout: React.ComponentType<React.ComponentType<MonthViewBase.LayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day scale layout. */
  DayScaleLayout: React.ComponentType<React.ComponentType<MonthViewBase.DayScaleLayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day scale cell. */
  DayScaleCell: React.ComponentType<React.ComponentType<MonthViewBase.DayScaleCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time table layout. */
  TimeTableLayout: React.ComponentType<React.ComponentType<MonthViewBase.TimeTableLayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time table cell. */
  TimeTableCell: React.ComponentType<React.ComponentType<MonthViewBase.TimeTableCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a generic row. */
  Row: React.ComponentType<React.ComponentType<MonthViewBase.RowProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the appointment layer. */
  AppointmentLayer: React.ComponentType<React.ComponentType<MonthViewBase.AppointmentLayerProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// Scheduler
// -------------------------------------------------------------------------------------------------

import {
  Scheduler as SchedulerBase,
} from '@devexpress/dx-react-scheduler';


export namespace Scheduler {
  /** Describes properties passed to a component that renders the root layout. */
  export type RootProps = SchedulerBase.RootProps;
}

export interface SchedulerProps {
  /** An array of appointment data objects. */
  data?: Array<AppointmentModel>;
  /** The scheduler's height. If the value is `auto`, the height equals that of the container component. */
  height?: number | `auto`;
  /** The locale according to which dates should be formatted. */
  locale?: string | Array<string>;
  /** A component that renders the root layout. */
  rootComponent?: React.ComponentType<SchedulerBase.RootProps>;
}

/** The Scheduler is a root container component designed to process and display the specified data. The Scheduler's functionality  is implemented in several plugins specified as child components. */
export declare const Scheduler: React.ComponentType<SchedulerProps> & {
  /** A component that renders the root layout. */
  Root: React.ComponentType<SchedulerBase.RootProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// TodayButton
// -------------------------------------------------------------------------------------------------

import {
  TodayButton as TodayButtonBase,
} from '@devexpress/dx-react-scheduler';


export namespace TodayButton {
  /** Properties passed to the component that renders the today button. */
  export type ButtonProps = TodayButtonBase.ButtonProps;
}

export interface TodayButtonProps {
  /** A component that renders the today button. */
  buttonComponent?: React.ComponentType<TodayButtonBase.ButtonProps>;
  /** An object that specifies localization messages. */
  messages?: TodayButtonBase.LocalizationMessages;
}

/** A plugin that renders the Scheduler's button that is used to navigate to the today's date */
export declare const TodayButton: React.ComponentType<TodayButtonProps> & {
  /** A component that renders the today button. */
  Button: React.ComponentType<TodayButtonBase.ButtonProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// Toolbar
// -------------------------------------------------------------------------------------------------

import {
  Toolbar as ToolbarBase,
} from '@devexpress/dx-react-scheduler';


export namespace Toolbar {
  /** Describes properties passed to a component that renders the toolbar's root element. */
  export type RootProps = ToolbarBase.RootProps;
}

export namespace Toolbar {
  /** Describes properties passed to a component that renders the the toolbar's empty area. */
  export type FlexibleSpaceProps = ToolbarBase.FlexibleSpaceProps;
}

export interface ToolbarProps {
  /** A component that renders the toolbar's root element. */
  rootComponent?: React.ComponentType<ToolbarBase.RootProps>;
  /** A component that renders the toolbar's empty area. */
  flexibleSpaceComponent?: React.ComponentType<ToolbarBase.FlexibleSpaceProps>;
}

/** A plugin that renders the Scheduler's toolbar. */
export declare const Toolbar: React.ComponentType<ToolbarProps> & {
  /** A component that renders the toolbar's root element. */
  Root: React.ComponentType<ToolbarBase.RootProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the toolbar's empty area. */
  FlexibleSpace: React.ComponentType<ToolbarBase.FlexibleSpaceProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// ViewSwitcher
// -------------------------------------------------------------------------------------------------

import {
  ViewSwitcher as ViewSwitcherBase,
} from '@devexpress/dx-react-scheduler';


export namespace ViewSwitcher {
  /** Properties passed to a component that renders the view switcher. */
  export type SwitcherProps = ViewSwitcherBase.SwitcherProps;
}

export interface ViewSwitcherProps {
  /** A component that renders the view switcher. */
  switcherComponent?: React.ComponentType<ViewSwitcherBase.SwitcherProps>;
}

/** A plugin that renders the Scheduler's view switcher. */
export declare const ViewSwitcher: React.ComponentType<ViewSwitcherProps> & {
  /** A component that renders the view switcher. */
  Switcher: React.ComponentType<ViewSwitcherBase.SwitcherProps & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};

// -------------------------------------------------------------------------------------------------
// WeekView
// -------------------------------------------------------------------------------------------------

import {
  WeekView as WeekViewBase,
} from '@devexpress/dx-react-scheduler';


export namespace WeekView {
  /** Describes a cell data configuration object. */
  export type CellData = WeekViewBase.CellData;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a week view layout. */
  export type LayoutProps = WeekViewBase.LayoutProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a time scale layout. */
  export type TimeScaleLayoutProps = WeekViewBase.TimeScaleLayoutProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a time scale cell. */
  export type TimeScaleCellProps = WeekViewBase.TimeScaleCellProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a day scale layout. */
  export type DayScaleLayoutProps = WeekViewBase.DayScaleLayoutProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a day scale cell. */
  export type DayScaleCellProps = WeekViewBase.DayScaleCellProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a day scale empty cell. */
  export type DayScaleEmptyCellProps = WeekViewBase.DayScaleEmptyCellProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a time table layout. */
  export type TimeTableLayoutProps = WeekViewBase.TimeTableLayoutProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a time table cell. */
  export type TimeTableCellProps = WeekViewBase.TimeTableCellProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders the appointment layer. */
  export type AppointmentLayerProps = WeekViewBase.AppointmentLayerProps;
}

export namespace WeekView {
  /** Describes properties passed to a component that renders a week view row. */
  export type RowProps = WeekViewBase.RowProps;
}

export interface WeekViewProps {
  /** The view's unique identifier. Required if you use several `WeekView` plugins. */
  name?: string;
  /** The view's name used in UI plugins. The default value is equal to `name`. */
  displayName?: string;
  /** Specifies the days of week that should not be displayed in the view. Accepts an array of zero-bazed day indexes . */
  excludedDays?: Array<number>;
  /** Specifies the first day of week. */
  firstDayOfWeek?: number;
  /** Multiplies the default view interval. */
  intervalCount?: number;
  /** Specifies the cell's duration in minutes. */
  cellDuration?: number;
  /** Specifies the start hour of the view time scale. */
  startDayHour?: number;
  /** Specifies the end hour of the view time scale. */
  endDayHour?: number;
  /** A component that renders a week view layout. */
  layoutComponent?: React.ComponentType<WeekViewBase.LayoutProps>;
  /** A component that renders a time scale layout. */
  timeScaleLayoutComponent?: React.ComponentType<WeekViewBase.TimeScaleLayoutProps>;
  /** A component that renders a time scale row. */
  timeScaleRowComponent?: React.ComponentType<WeekViewBase.RowProps>;
  /** A component that renders a time scale cell. */
  timeScaleCellComponent?: React.ComponentType<WeekViewBase.TimeScaleCellProps>;
  /** A component that renders a day scale layout. */
  dayScaleLayoutComponent?: React.ComponentType<WeekViewBase.DayScaleLayoutProps>;
  /** A component that renders a day scale cell. */
  dayScaleCellComponent?: React.ComponentType<WeekViewBase.DayScaleCellProps>;
  /** A component that renders a day scale row. */
  dayScaleRowComponent?: React.ComponentType<WeekViewBase.RowProps>;
  /** A component that renders a day scale empty cell. */
  dayScaleEmptyCellComponent?: React.ComponentType<WeekViewBase.DayScaleEmptyCellProps>;
  /** A component that renders a time table layout. */
  timeTableLayoutComponent?: React.ComponentType<WeekViewBase.TimeTableLayoutProps>;
  /** A component that renders a time table cell. */
  timeTableCellComponent?: React.ComponentType<WeekViewBase.TimeTableCellProps>;
  /** A component that renders a time table row. */
  timeTableRowComponent?: React.ComponentType<WeekViewBase.RowProps>;
  /** A component that renders an appointment layer. */
  appointmentLayerComponent?: React.ComponentType<WeekViewBase.AppointmentLayerProps>;
}

/** A plugin that renders the Scheduler's week view. This plugin arranges appointments from top to bottom. If their time intervals overlap, their width is decreased and they are placed next to each other. */
export declare const WeekView: React.ComponentType<WeekViewProps> & {
  /** A component that renders a week view layout. */
  Layout: React.ComponentType<React.ComponentType<WeekViewBase.LayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time scale layout. */
  TimeScaleLayout: React.ComponentType<React.ComponentType<WeekViewBase.TimeScaleLayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time scale cell. */
  TimeScaleCell: React.ComponentType<React.ComponentType<WeekViewBase.TimeScaleCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day scale layout. */
  DayScaleLayout: React.ComponentType<React.ComponentType<WeekViewBase.DayScaleLayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day scale cell. */
  DayScaleCell: React.ComponentType<React.ComponentType<WeekViewBase.DayScaleCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a day scale empty cell. */
  DayScaleEmptyCell: React.ComponentType<React.ComponentType<WeekViewBase.DayScaleEmptyCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time table layout. */
  TimeTableLayout: React.ComponentType<React.ComponentType<WeekViewBase.TimeTableLayoutProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a time table cell. */
  TimeTableCell: React.ComponentType<React.ComponentType<WeekViewBase.TimeTableCellProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders a week view's generic row. */
  Row: React.ComponentType<React.ComponentType<WeekViewBase.RowProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
  /** A component that renders the appointment layer. */
  AppointmentLayer: React.ComponentType<React.ComponentType<WeekViewBase.AppointmentLayerProps> & { className?: string; style?: React.CSSProperties; [x: string]: any }>;
};
