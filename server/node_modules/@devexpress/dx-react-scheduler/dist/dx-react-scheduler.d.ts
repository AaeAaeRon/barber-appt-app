// Dependencies for this module:
//   ../../../../react
//   ../../../../moment

import * as React from 'react';
import moment from 'moment';

/***
  * The Scheduler is a root container component designed to process
  * and display the specified data. The Scheduler’s functionality
  * (data visualization and processing) is implemented in several plugins specified as child components.
  * */
export const Scheduler: React.ComponentType<SchedulerProps>;

/*** A plugin that renders Scheduler data for a day. This plugin arranges appointments from top to bottom.
  * If their time intervals overlap, their width is decreased and they are placed next to each other.
  * */
export const DayView: React.ComponentType<VerticalViewProps>;

/***
  * A plugin that renders the Scheduler's week view. This plugin arranges appointments from top to bottom.
  * If their time intervals overlap, their width is decreased and they are placed next to each other.
  * */
export const WeekView: React.ComponentType<WeekViewProps>;

/***
  * A plugin that renders Scheduler data for a month. This plugin arranges appointments from left to right.
  * An appointment's size depends on its duration in days.
  * However, it occupies the entire day cell if an appointment lasts only for several hours or minutes.
  * The time scale and all-day panel are not available in this view.
  * */
export const MonthView: React.ComponentType<MonthViewProps>;

/** A plugin that renders the Scheduler's toolbar. */
export const Toolbar: React.ComponentType<ToolbarProps>;

/** A plugin that renders the Scheduler’s date navigator. */
export const DateNavigator: React.ComponentType<DateNavigatorProps>;

/** A plugin that renders the Scheduler's view switcher. */
export const ViewSwitcher: React.ComponentType<ViewSwitcherProps>;

/** A plugin that renders appointments. */
export const Appointments: React.ComponentType<AppointmentsProps>;

/** A plugin that renders the All Day Panel. */
export const AllDayPanel: React.ComponentType<AllDayPanelProps>;

/** A plugin that manages the view state. It specifies the current date and the displayed view. */
export const ViewState: React.ComponentType<ViewStateProps>;

/** A plugin that manages the scheduler appointment editing state. */
export const EditingState: React.ComponentType<EditingStateProps>;

/** The AppointmentTooltip plugin allows you to display information about an appointment in a tooltip. */
export const AppointmentTooltip: React.ComponentType<AppointmentTooltipProps>;

/** The AppointmentForm plugin renders a form that visualizes appointment’s data and allows a user to modify this data. */
export const AppointmentForm: React.ComponentType<AppointmentFormProps>;

/** A plugin that enables users to edit appointments via drag-and-drop. */
export const DragDropProvider: React.ComponentType<DragDropProviderProps>;

/** A plugin that renders the Scheduler's button which sets the current date to today's date. */
export const TodayButton: React.ComponentType<TodayButtonProps>;

/**
  * A plugin that renders the Scheduler's edit menu.
  * Should not be used with the `IntegratedEditing` plugin.
  */
export const EditRecurrenceMenu: React.ComponentType<EditRecurrenceMenuProps>;

/** A plugin that allows implementing a editing calculation logic. */
export const IntegratedEditing: React.ComponentType<IntegratedEditingProps>;

export namespace ViewSwitcher {
  /** Describes properties passed to a component that renders the scheduler root layout. */
  interface SwitcherProps {
    /** A displayed view. */
    currentView: SchedulerView;
    /** An array of available views. */
    availableViews: SchedulerView[];
    /** A function that handles changes to the displayed view. */
    onChange: (nextViewName: string) => void;
  }
}
export interface ViewSwitcherProps {
  /** A component that renders the view switcher. */
  switcherComponent: React.ComponentType<ViewSwitcher.SwitcherProps>;
}

export namespace Scheduler {
    /** Describes properties passed to a component that renders the scheduler root layout. */
    interface RootProps {
        /** A React node to be placed in the root layout. */
        children?: React.ReactNode;
        /** The Scheduler's height. */
        height: number | 'auto';
    }
}
export interface SchedulerProps {
    /*** An array of appointment data objects. */
    data: AppointmentModel[];
    /** A component that renders the root layout. */
    rootComponent: React.ComponentType<Scheduler.RootProps>;
    /** The locale according to which dates should be formatted. */
    locale: string | string[];
    /***
      * The scheduler's height. If the value is 'auto',
      * the height equals that of the container component.
      * **/
    height: number | 'auto';
}

export interface ViewStateProps {
  /** The current date. */
  currentDate?: number | string | Date;
  /** The initial date in the uncontrolled mode. */
  defaultCurrentDate?: number | string | Date;
  /** Handles changes to the current date. */
  onCurrentDateChange?: (currentDate: Date) => void;
  /** The displayed view’s name. */
  currentViewName?: string;
  /** The initially displayed view’s name in the uncontrolled mode. */
  defaultCurrentViewName?: string;
  /** Handles changes to the displayed view. */
  onCurrentViewNameChange?: (viewName: string) => void;
}

export interface VerticalViewProps {
  /** The view's unique identifier. */
  name?: string;
  /** The view's name used in UI plugins. */
  displayName?: string;
  /** Multiplies the default view interval. */
  intervalCount?: number;
  /** Specifies the cell's duration in minutes. */
  cellDuration?: number;
  /** Specifies the start hour of the view time scale. */
  startDayHour?: number;
  /** Specifies the end hour of the view time scale. */
  endDayHour?: number;
  /** A component that renders a view layout. */
  layoutComponent: React.ComponentType<VerticalView.LayoutProps>;
  /** A component that renders a time scale layout. */
  timeScaleLayoutComponent: React.ComponentType<VerticalView.TimeScaleLayoutProps>;
  /** A component that renders a time scale row. */
  timeScaleRowComponent: React.ComponentType<VerticalView.RowProps>;
  /** A component that renders a time scale cell. */
  timeScaleCellComponent: React.ComponentType<VerticalView.TimeScaleCellProps>;
  /** A component that renders a day scale layout. */
  dayScaleLayoutComponent: React.ComponentType<VerticalView.DayScaleLayoutProps>;
  /** A component that renders a day scale cell. */
  dayScaleCellComponent: React.ComponentType<VerticalView.DayScaleCellProps>;
  /** A component that renders a day scale row.  */
  dayScaleRowComponent: React.ComponentType<VerticalView.RowProps>;
  /** A component that renders a day scale empty cell.  */
  dayScaleEmptyCellComponent: React.ComponentType<VerticalView.DayScaleEmptyCellProps>;
  /** A component that renders a time table layout. */
  timeTableLayoutComponent: React.ComponentType<VerticalView.TimeTableLayoutProps>;
  /** A component that renders a time table cell. */
  timeTableCellComponent: React.ComponentType<VerticalView.TimeTableCellProps>;
  /** A component that renders a time table row. */
  timeTableRowComponent: React.ComponentType<VerticalView.RowProps>;
  /** A component that renders the appointment layer. */
  appointmentLayerComponent: React.ComponentType<VerticalView.AppointmentLayerProps>;
}
export namespace VerticalView {
  /** Describes properties passed to a component that renders a vertical view layout. */
  interface LayoutProps {
    /** The scrolling API callback */
    setScrollingStrategy: (scrollingStrategy: ScrollingStrategy) => void;
    /** A component that renders a time scale layout. */
    timeScaleComponent: React.ComponentType<VerticalView.TimeScaleLayoutProps>;
    /** A component that renders a day scale layout. */
    dayScaleComponent: React.ComponentType<VerticalView.DayScaleLayoutProps>;
    /** A component that renders a time table layout. */
    timeTableComponent: React.ComponentType<VerticalView.TimeTableLayoutProps>;
    /** A component that renders a day scale empty cell. */
    dayScaleEmptyCellComponent: React.ComponentType<VerticalView.DayScaleEmptyCellProps>;
  }
  /** Describes properties passed to a component that renders a time scale layout. */
  interface TimeScaleLayoutProps {
    /** Specifies the cells meta data. */
    cellsData: VerticalView.CellData[][];
    /** A component that renders a time scale cell. */
    cellComponent: React.ComponentType<VerticalView.TimeScaleCellProps>;
    /** A component that renders a time scale row. */
    rowComponent: React.ComponentType<VerticalView.RowProps>;
    /** A function that formats dates according to the locale. */
    formatDate: FormatterFn;
  }
  /** Describes properties passed to a component that renders a time table layout. */
  interface TimeTableLayoutProps {
    /** Specifies the cells meta data. */
    cellsData: VerticalView.CellData[][];
    /** A component that renders a time table cell. */
    cellComponent: React.ComponentType<VerticalView.TimeTableCellProps>;
    /** A component that renders a time table row. */
    rowComponent: React.ComponentType<VerticalView.RowProps>;
    /** A function that formats dates according to the locale. */
    formatDate: FormatterFn;
    /** A setCellElementsMeta callback */
    setCellElementsMeta: (cellElementsMeta: CellElementsMeta) => void;
  }
  /** Describes properties passed to a component that renders a time table cell. */
  interface TimeTableCellProps {
    /** Specifies the cell a start time. */
    startDate?: Date;
    /** Specifies the cell end time. */
    endDate?: Date;
    /** A React node used to render the time table cell content. */
    children?: React.ReactNode;
  }
  /** Describes properties passed to a component that renders a day scale empty cell. */
  interface DayScaleEmptyCellProps {
    /** A React node used to render the row content. */
    children?: React.ReactNode;
  }
  /** Describes properties passed to a component that renders a time scale cell. */
  interface TimeScaleCellProps {
    /** Specifies the cell end time. */
    endDate: Date;
    /** Specifies the cell start time. */
    startDate: Date;
  }
  /** Describes properties passed to a component that renders a day scale layout. */
  interface DayScaleLayoutProps {
    /** Specifies the cells meta data. */
    cellsData: VerticalView.CellData[][];
    /** A component that renders a day scale cell. */
    cellComponent: React.ComponentType<VerticalView.DayScaleCellProps>;
    /** A component that renders a day scale row. */
    rowComponent: React.ComponentType<VerticalView.RowProps>;
    /** A function that formats dates according to the locale. */
    formatDate: FormatterFn;
  }
  /** Describes properties passed to a component that renders a day scale cell. */
  interface DayScaleCellProps {
    /** Specifies the cell end time. */
    startDate: Date;
    /** Specifies the cell start time. */
    endDate?: Date;
    /** Indicates whether the cell’s date is today. */
    today?: boolean;
  }
  /** Describes properties passed to a component that renders the appointment layer. */
  interface AppointmentLayerProps {
    /** A React node used to render the appointment layer content. */
    children?: React.ReactNode;
  }
  /** Describes properties passed to a component that renders a day view row. */
  interface RowProps {
    /** A React node used to render the row content. */
    children?: React.ReactNode;
  }
  /** Describes a cell data configuration object. */
  interface CellData {
    /** Specifies the cell start time. */
    startDate: Date;
    /** Specifies the cell end time. */
    endDate: Date;
    /** Indicates whether the cell’s date is today. */
    today: boolean;
  }
}

export namespace DayView {
  /** Describes a cell data configuration object. */
  interface CellData extends VerticalView.CellData {
  }
  /** Describes properties passed to a component that renders a day view layout. */
  interface LayoutProps extends VerticalView.LayoutProps {
  }
  /** Describes properties passed to a component that renders a time scale layout. */
  interface TimeScaleLayoutProps extends VerticalView.TimeScaleLayoutProps {
  }
  /** Describes properties passed to a component that renders a time scale cell. */
  interface TimeScaleCellProps extends VerticalView.TimeScaleCellProps {
  }
  /** Describes properties passed to a component that renders a day scale layout. */
  interface DayScaleLayoutProps extends VerticalView.DayScaleLayoutProps {
  }
  /** Describes properties passed to a component that renders a day scale cell. */
  interface DayScaleCellProps extends VerticalView.DayScaleCellProps {
  }
  /** Describes properties passed to a component that renders a day scale empty cell. */
  interface DayScaleEmptyCellProps extends VerticalView.DayScaleEmptyCellProps {
  }
  /** Describes properties passed to a component that renders a time table layout. */
  interface TimeTableLayoutProps extends VerticalView.TimeTableLayoutProps {
  }
  /** Describes properties passed to a component that renders a time table cell. */
  interface TimeTableCellProps extends VerticalView.TimeTableCellProps {
  }
  /** Describes properties passed to a component that renders the appointment layer. */
  interface AppointmentLayerProps extends VerticalView.AppointmentLayerProps {
  }
  /** Describes properties passed to a component that renders a day view row. */
  interface RowProps extends VerticalView.RowProps {
  }
}

export namespace WeekView {
  /** Describes a cell data configuration object. */
  interface CellData extends VerticalView.CellData {
  }
  /** Describes properties passed to a component that renders a week view layout. */
  interface LayoutProps extends VerticalView.LayoutProps {
  }
  /** Describes properties passed to a component that renders a time scale layout. */
  interface TimeScaleLayoutProps extends VerticalView.TimeScaleLayoutProps {
  }
  /** Describes properties passed to a component that renders a time scale cell. */
  interface TimeScaleCellProps extends VerticalView.TimeScaleCellProps {
  }
  /** Describes properties passed to a component that renders a day scale layout. */
  interface DayScaleLayoutProps extends VerticalView.DayScaleLayoutProps {
  }
  /** Describes properties passed to a component that renders a day scale cell. */
  interface DayScaleCellProps extends VerticalView.DayScaleCellProps {
  }
  /** Describes properties passed to a component that renders a day scale empty cell. */
  interface DayScaleEmptyCellProps extends VerticalView.DayScaleEmptyCellProps {
  }
  /** Describes properties passed to a component that renders a time table layout. */
  interface TimeTableLayoutProps extends VerticalView.TimeTableLayoutProps {
  }
  /** Describes properties passed to a component that renders a time table cell. */
  interface TimeTableCellProps extends VerticalView.TimeTableCellProps {
  }
  /** Describes properties passed to a component that renders the appointment layer. */
  interface AppointmentLayerProps extends VerticalView.AppointmentLayerProps {
  }
  /** Describes properties passed to a component that renders a week view row. */
  interface RowProps extends VerticalView.RowProps {
  }
}
export interface WeekViewProps extends VerticalViewProps {
  /** Specifies the days of week that should not be displayed on the view. Accepts an array of zero-bazed day indexes (0 - Sunday). */
  excludedDays?: number[];
  /** Specifies the first day of week. */
  firstDayOfWeek?: number;
}

type MonthViewPropsType = Pick<VerticalViewProps, Exclude<keyof VerticalViewProps, 'timeScaleLayoutComponent' | 'timeScaleRowComponent' | 'timeScaleCellComponent' | 'layoutComponent' | 'dayScaleEmptyCellComponent'>> & Pick<WeekViewProps, 'firstDayOfWeek'>;
export interface MonthViewProps extends MonthViewPropsType {
  /** A component that renders a view layout. */
  layoutComponent: React.ComponentType<MonthView.LayoutProps>;
}
export namespace MonthView {
  /** Describes properties passed to a component that renders the appointment layer. */
  interface AppointmentLayerProps extends VerticalView.AppointmentLayerProps {
  }
  /** Describes a cell data configuration object. */
  interface CellData {
    /** Specifies the cell start time. */
    startDate: Date;
    /** Specifies the cell end time. */
    endDate: Date;
    /** Indicates whether the cell’s date is not in the current month. */
    otherMonth: boolean;
    /** Indicates whether the cell’s date is today. */
    today: boolean;
  }
  /** Describes properties passed to a component that renders a time scale cell. */
  interface TimeTableCellProps {
    /** Specifies the cell start time. */
    startDate?: Date;
    /** Specifies the cell end time. */
    endDate?: Date;
    /** Indicates whether the cell’s date is not in the current month. */
    otherMonth?: boolean;
    /** Indicates whether the cell’s date is today. */
    today?: boolean;
  }
  /** Describes properties passed to a component that renders a day scale cell. */
  interface DayScaleCellProps {
    /** Specifies the cell start time. */
    startDate: Date;
    /** Specifies the cell end time. */
    endDate?: Date;
  }
  /** Describes properties passed to a component that renders a row. */
  interface RowProps {
    /** A React node used to render the row content. */
    children?: React.ReactNode;
  }
  /** Describes properties passed to a component that renders a day scale layout. */
  interface DayScaleLayoutProps {
    /** 	Specifies the cells meta data. */
    cellsData: MonthView.CellData[][];
    /** A component that renders a day scale cell. */
    cellComponent: React.ComponentType<MonthView.DayScaleCellProps>;
    /** A component that renders a day scale row. */
    rowComponent: React.ComponentType<MonthView.RowProps>;
  }
  /** Describes properties passed to a component that renders a time table layout. */
  interface TimeTableLayoutProps {
    /** Specifies the cells meta data. */
    cellsData: MonthView.CellData[][];
    /** A function that accepts the table’s root React element. */
    tableRef: React.RefObject<HTMLElement>;
    /** A component that renders a time table cell. */
    cellComponent: React.ComponentType<MonthView.TimeTableCellProps>;
    /** A component that renders a time table row. */
    rowComponent: React.ComponentType<MonthView.RowProps>;
  }
  interface LayoutProps {
    /** A component that renders a day scale layout. */
    dayScaleComponent: React.ComponentType<MonthView.DayScaleLayoutProps>;
    /** A component that renders a time table layout. */
    timeTableComponent: React.ComponentType<MonthView.TimeTableLayoutProps>;
    /** The scrolling API callback */
    setScrollingStrategy: (scrollingStrategy: ScrollingStrategy) => void;
  }
}

export namespace AllDayPanel {
  /** Describes a cell data configuration object. */
  interface CellData {
    /** The cell’s start time. */
    startDate: Date;
    /** The cell’s end time. */
    endDate: Date;
  }
  /** Describes properties passed to a component that renders an All Day panel layout. */
  interface LayoutProps {
    /** Cells’ meta data. */
    cellsData: AllDayCell[];
    /** A component that renders an All Day panel cell. */
    cellComponent: React.ComponentType<AllDayPanel.CellProps>;
    /** A component that renders an All Day panel row. */
    rowComponent: React.ComponentType<AllDayPanel.RowProps>;
    /** A function that formats dates according to the locale. */
    formatDate: FormatterFn;
    /** A setCellElementsMeta callback */
    setCellElementsMeta: (cellElementsMeta: CellElementsMeta) => void;
  }
  /** Describes properties passed to a component that renders an All Day panel cell. */
  interface CellProps {
    /** The cell’s start time. */
    startDate: Date;
    /** The cell’s end time. */
    endDate: Date;
  }
  /** Describes properties passed to a component that renders an All Day panel row. */
  interface RowProps {
    /** A React node used to render the row content. */
    children?: React.ReactNode;
  }
  /** Describes properties passed to a component that renders a title cell. */
  interface TitleCellProps {
    /** Returns a localization message by the message key. */
    getMessage: (messageKey: string) => string;
  }
  /** Describes properties passed to a component that renders the appointment layer. */
  interface AppointmentLayerProps {
    /** A React node used to render the appointment layer content. */
    children?: React.ReactNode;
  }
  /** Describes properties passed to a component that renders an All Day panel container. */
  interface ContainerProps {
    /** A React node used to render the All Day panel container content. */
    children: React.ReactNode;
  }
  /** Localization Messages */
  interface LocalizationMessages {
    /** The All Day panel’s title. */
    allDay?: string;
  }
}
export interface AllDayPanelProps {
  /** A component that renders an All Day panel layout. */
  layoutComponent: React.ComponentType<AllDayPanel.LayoutProps>;
  /** A component that renders an All Day panel cell. */
  cellComponent: React.ComponentType<AllDayPanel.CellProps>;
  /** A component that renders an All Day panel row. */
  rowComponent: React.ComponentType<AllDayPanel.RowProps>;
  /** A component that renders a title cell. */
  titleCellComponent: React.ComponentType<AllDayPanel.TitleCellProps>;
  /** A component that renders the appointment layer. */
  appointmentLayerComponent: React.ComponentType<AllDayPanel.AppointmentLayerProps>;
  /** A component that renders an All Day panel container. */
  containerComponent: React.ComponentType<AllDayPanel.ContainerProps>;
  /** An object that specifies localization messages. */
  messages?: AllDayPanel.LocalizationMessages;
}

export namespace Toolbar {
  /** Describes properties passed to a component that renders the toolbar root element. */
  interface RootProps {
    /** A React node to be placed in the toolbar. */
    children?: React.ReactNode;
  }
  interface FlexibleSpaceProps {
    /** A React node that should be placed inside the empty area. */
    children?: React.ReactNode;
  }
}
export interface ToolbarProps {
  /** A component that renders the toolbar root element. */
  rootComponent: React.ComponentType<Toolbar.RootProps>;
  /** A component that renders the toolbar’s empty area. */
  flexibleSpaceComponent: React.ComponentType<Toolbar.FlexibleSpaceProps>;
}

export interface EditingStateProps {
  /** The data of an appointment being edited. */
  editingAppointment?: Partial<AppointmentModel>;
  /** The initial value of the editingAppointment property in uncontrolled mode. */
  defaultEditingAppointment?: Partial<AppointmentModel>;
  /** Handles changes to the editingAppointment property value. */
  onEditingAppointmentChange?: (editingAppointment: Partial<AppointmentModel>) => void;
  /** A created but not committed appointment. */
  addedAppointment?: object;
  /** The initial value of the addedAppointment property in uncontrolled mode. */
  defaultAddedAppointment?: object;
  /** Handles changes to the addedAppointment property value. */
  onAddedAppointmentChange?: (addedAppointment: object) => void;
  /** Uncommitted appointment changes. */
  appointmentChanges?: {
    [key: string]: object;
  };
  /** The initial value of the appointmentChanges property in uncontrolled mode. */
  defaultAppointmentChanges?: {
    [key: string]: object;
  };
  /** Handles changes to the appointmentChanges property value. */
  onAppointmentChangesChange?: (appointmentChanges: {
    [key: string]: any;
  }) => void;
  /** Handles commiting appointment changes. */
  onCommitChanges: (changes: ChangeSet) => void;
  /** Handles commiting appointment changes. */
  preCommitChanges?: PreCommitChangesFn;
}

export namespace AppointmentTooltip {
  /** Describes properties passed to a component that renders a tooltip layout. */
  interface LayoutProps {
    /** Specifies the Open button’s visibility. */
    showOpenButton: boolean;
    /** Specifies the Close button’s visibility. */
    showCloseButton: boolean;
    /** Specifies the Delete button’s visibility. */
    showDeleteButton: boolean;
    /** A command button’s identifier list. */
    commandButtonIds: Array<string>;
    /** An event raised when the Open button is clicked. The event handler should open the appointment form. */
    onOpenButtonClick?: () => void;
    /** An event raised when the Open button is clicked. The event handler should delete an appointment. */
    onDeleteButtonClick?: () => void;
    /** The appointment’s displayed metadata. */
    appointmentMeta?: AppointmentMeta;
    /** Specifies the tooltip’s visibility. */
    visible?: boolean;
    /** An event that hides the tooltip. */
    onHide?: () => void;
    /** A component that renders the tooltip header. */
    headerComponent: React.ComponentType<AppointmentTooltip.HeaderProps>;
    /** A component that renders the tooltip content. */
    contentComponent: React.ComponentType<AppointmentTooltip.ContentProps>;
    /** A component that renders a command button. */
    commandButtonComponent: React.ComponentType<AppointmentTooltip.CommandButtonProps>;
  }
  /** Describes properties passed to a component that renders the tooltip header. */
  interface HeaderProps {
    /** The appointment’s displayed metadata. */
    appointmentData?: AppointmentModel;
    /** A React node used to render the tooltip header. */
    children?: React.ReactNode;
  }
  /** Describes properties passed to a component that renders the tooltip content. */
  interface ContentProps {
    /** The appointment’s displayed metadata. */
    appointmentData?: AppointmentModel;
    /** A React node used to render the tooltip content. */
    children?: React.ReactNode;
  }
  /** Describes properties passed to a component that renders a command button. */
  interface CommandButtonProps {
    /** The command identifier. */
    id?: 'open' | 'delete' | 'close';
    /** An event that executes the command. */
    onExecute?: () => void;
  }
}
export interface AppointmentTooltipProps {
  /** Specifies the Open button’s visibility. */
  showOpenButton?: boolean;
  /** Specifies the Close button’s visibility. */
  showCloseButton?: boolean;
  /** Specifies the Delete button’s visibility. */
  showDeleteButton?: boolean;
  /** Specifies the tooltip’s visibility. */
  visible?: boolean;
  /** The appointment’s displayed metadata. */
  appointmentMeta?: AppointmentMeta;
  /** Handles the tooltip’s visibility chages. */
  onVisibilityChange?: (visible: boolean) => void;
  /** Handles the meta data changes. */
  onAppointmentMetaChange?: (appointmentMeta: AppointmentMeta) => void;
  /** A component that renders the tooltip layout. */
  layoutComponent: React.ComponentType<AppointmentTooltip.LayoutProps>;
  /** A component that renders the header. */
  headerComponent: React.ComponentType<AppointmentTooltip.HeaderProps>;
  /** A component that renders the tooltip content. */
  contentComponent: React.ComponentType<AppointmentTooltip.ContentProps>;
  /** A component that renders a command button. */
  commandButtonComponent: React.ComponentType<AppointmentTooltip.CommandButtonProps>;
}

export namespace AppointmentForm {
  /** Properties passed to a component that renders the appointment form’s popup. */
  interface PopupProps {
    /** Specifies whether the popup is visible. */
    visible?: boolean;
    /** A React node used to render the popup content. */
    children: React.ReactNode;
  }
  /** Properties passed to a component that renders the appointment form’s container. */
  interface ContainerProps {
    /** A React node used to render the container content. */
    children: React.ReactNode;
  }
  /** Properties passed to a component that renders the appointment form’s scrollable area. */
  interface ScrollableAreaProps {
    children: React.ReactNode;
  }
  /** Properties passed to a component that renders the appointment form’s static area. */
  interface StaticAreaProps {
    /** A React node used to render the static area content. */
    children: React.ReactNode;
  }
  /** Localization Messages */
  interface LocalizationMessages {
    /** The all day editor’s label text. */
    allDayLabel?: string;
    /** The title editor’s label text. */
    titleLabel?: string;
    /** The start date editor’s label text. */
    startDateLabel?: string;
    /** The end date editor’s label text. */
    endDateLabel?: string;
    /** The commit button’s text. */
    commitCommand?: string;
    /** The cancel button’s text. */
    cancelCommand?: string;
  }
}
export interface AppointmentFormProps {
  /** Specifies the appointment form’s visibility. */
  visible?: boolean;
  /** Handles changes to the appointment form’s visibility. */
  onVisibilityChange?: (visible: boolean) => void;
  /** Specifies the appointment’s data that the form displays. */
  appointmentData?: AppointmentModel;
  /** Handles changes to the appointment’s data. */
  onAppointmentDataChange?: (appointmentData: AppointmentModel) => void;
  /** Specifies the appointment form is read-only. */
  readOnly?: boolean;
  /** A component that renders the appointment form’s popup. */
  popupComponent: React.ComponentType<AppointmentForm.PopupProps>;
  /** A component that renders the appointment form’s container. */
  containerComponent: React.ComponentType<AppointmentForm.ContainerProps>;
  /** A component that renders the appointment form’s scrollable area. */
  scrollableAreaComponent: React.ComponentType<AppointmentForm.ScrollableAreaProps>;
  /** A component that renders the appointment form’s static area. */
  staticAreaComponent: React.ComponentType<AppointmentForm.StaticAreaProps>;
  /** An object that specifies localization messages. */
  messages?: AppointmentForm.LocalizationMessages;
}

export namespace EditRecurrenceMenu {
  /** Properties passed to a component that renders the edit menu's layout. */
  interface LayoutProps {
    /** 'true' if the appointment is being deleted or 'false' if it is being edited. */
    isDeleting: boolean;
    /** A component that renders the OK and Cancel buttons. */
    buttonComponent: React.ComponentType<EditRecurrenceMenu.ButtonProps>;
    /** A function that closes the menu. */
    handleClose: () => void;
    /** A function that commits changes. */
    commit: () => void;
    /** A list of available editing operations. */
    availableOperations: Array<any>;
    /** A function that returns a message with the specified key. */
    getMessage: (messageKey: string) => string;
  }
  /** Properties passed to a component that renders the overlay window. */
  interface OverlayProps {
    /** A React component instance or a DOM element that is used to position the window. */
    target: React.RefObject<unknown>;
    /** A flag that specifies whether the overlay window is visible. */
    visible: boolean;
    /** A function that is executed when the window is hidden. */
    onHide: () => void;
  }
  /** Properties passed to a component that renders the OK and Cancel buttons. */
  interface ButtonProps {
    /** The button's text. */
    title: string;
    /** A function to execute when the button is clicked. */
    onClick: () => void;
  }
  /** Localization Messages */
  interface LocalizationMessages {
    /** Text for the 'Current appointment' option. */
    current?: string;
    /** Text for the 'Current and following appointments' option. */
    currentAndFollowing?: string;
    /** Text for the 'All appointments' option. */
    all?: string;
    /** The menu's title that should be displayed when an appointment is being edited. */
    menuEditingTitle?: string;
    /** The menu's title that should be displayed when an appointment is being deleted. */
    menuDeletingTitle?: string;
    /** The Cancel button's text. */
    cancelButton?: string;
    /** The OK button's text. */
    commitButton?: string;
  }
}
export interface EditRecurrenceMenuProps {
  /** A component that renders the edit menu's layout. */
  layoutComponent: React.ComponentType<EditRecurrenceMenu.LayoutProps>;
  /** A component that renders the overlay window. */
  overlayComponent: React.ComponentType<EditRecurrenceMenu.OverlayProps>;
  /** A component that renders the OK and Cancel buttons. */
  buttonComponent: React.ComponentType<EditRecurrenceMenu.ButtonProps>;
  /** An object that contains localized messages. */
  messages?: EditRecurrenceMenu.LocalizationMessages;
}

export interface IntegratedEditingProps {
}

export namespace DragDropProvider {
    /** Describes properties of the component that renders a container for the appointment being dragged. */
    interface ContainerProps {
        /** Represents the appointment being dragged. */
        children: React.ReactNode;
    }
    /** Describes properties of the component that renders the appointment being dragged. */
    interface DraftAppointmentProps {
        /** Specifies the appointment’s data. */
        data: AppointmentModel;
        /** Configures the appointment’s geometry and position. */
        style: React.CSSProperties;
        /** Specifies the appointment’s type. */
        type: string;
        /***
          * true if the appointment is continued from
          * the previous day/week/month/year.
          * */
        fromPrev: boolean;
        /** true if the appointment continues on the next day/week/month/year. */
        toNext: boolean;
    }
    /** Describes properties of the component that renders a copy of the appointment being dragged in its previous location. */
    interface SourceAppointmentProps {
        /** Specifies the appointment’s data. */
        data: AppointmentModel;
        /** Specifies the appointment’s type. */
        type: string;
    }
    /** Describes properties of the component that renders a handle used to resize the appointment. */
    interface ResizeProps {
        /** Specifies the handle’s position in the appointment. */
        position: 'start' | 'end';
        /** Specifies whether the appointment is vertical or horizontal. */
        appointmentType: 'vertical' | 'horizontal';
    }
}
export interface DragDropProviderProps {
    /** A function that specifies draggable appointments. */
    allowDrag?: (appointmentData: AppointmentModel) => boolean;
    /** A function that specifies resizable appointments. */
    allowResize?: (appointmentData: AppointmentModel) => boolean;
    /** A component that renders the appointment being dragged. */
    draftAppointmentComponent: React.ComponentType<DragDropProvider.DraftAppointmentProps>;
    /** A component that renders a copy of the appointment being dragged in its previous location. */
    sourceAppointmentComponent: React.ComponentType<DragDropProvider.SourceAppointmentProps>;
    /** A component that renders a handle used to resize the appointment. */
    resizeComponent: React.ComponentType<DragDropProvider.ResizeProps>;
    /***
      * A component that renders a container for the appointment being dragged.
      * */
    containerComponent: React.ComponentType<DragDropProvider.ContainerProps>;
}

export namespace DateNavigator {
    /** Describes properties passed to a component that renders the scheduler root layout. */
    interface RootProps {
        /** A component that renders the date navigator’s navigation buttons. */
        navigationButtonComponent: React.ComponentType<DateNavigator.NavigationButtonProps>;
        /** A component that renders a button that invokes the date navigator. */
        openButtonComponent: React.ComponentType<DateNavigator.OpenButtonProps>;
        /** Text displayed in the date navigator. */
        navigatorText?: string;
        /** A function that accepts the date navigator’s root element. */
        rootRef: (ref: React.ReactInstance) => void;
        /** An event raised when the date navigator should be shown or hidden. */
        onVisibilityToggle: () => void;
        /***
          * An event raised when a navigation button is clicked.
          * The event handler should switch the date navigator to the next or previous date.
          * */
        onNavigate: (direction: 'forward' | 'back' | undefined, nextDate: string | Date | number) => any;
    }
    /** Properties passed to a component that renders the date navigator’s overlay element. */
    interface OverlayProps {
        /** Specifies whether the overlay is visible. */
        visible?: boolean;
        /** A React component instance or a DOM element that is used to position the overlay element. */
        target?: React.ReactInstance;
        /** An event raised when the date navigator should be hidden. */
        onHide: () => void;
        /** A React node used to render the overlay content. */
        children: React.ReactNode;
    }
    /** Properties passed to a component that renders the date navigator’s open button. */
    interface OpenButtonProps {
        /** An event raised when the date navigator should be shown or hidden. */
        onVisibilityToggle: () => void;
        /** The button text. */
        text?: string;
    }
    /** Properties passed to a component that renders the date navigator’s navigation button. */
    interface NavigationButtonProps {
        /** The button type. */
        type: 'forward' | 'back';
        /** An event raised when the button is clicked. */
        onClick?: (e: any) => void;
    }
}
export interface DateNavigatorProps {
    /** A component that renders the date navigator’s root element. */
    rootComponent: React.ComponentType<DateNavigator.RootProps>;
    /** A component that renders the date navigator’s overlay element. */
    overlayComponent: React.ComponentType<DateNavigator.OverlayProps>;
    /** A component that renders a button that invokes the date navigator. */
    openButtonComponent: React.ComponentType<DateNavigator.OpenButtonProps>;
    /** A component that renders the date navigator’s navigation buttons. */
    navigationButtonComponent: React.ComponentType<DateNavigator.NavigationButtonProps>;
}

export namespace Appointments {
    /** Properties passed to a component that renders an appointment. */
    interface AppointmentProps {
        /** A React node used to render the appointment content. */
        children: React.ReactNode;
        /** An object that specifies the appointment data. */
        data: AppointmentModel;
        /** Specifies whether the appointment is draggable. */
        draggable: boolean;
        /** A function that handles a click on the appointment. */
        onClick?: (e: any) => void;
        /** A function that handles a double click on the appointment. */
        onDoubleClick?: (e: any) => void;
    }
    /** Properties passed to a component that renders the appointment content. */
    interface AppointmentContentProps {
        /** A React node used to render the appointment content. */
        children?: React.ReactNode;
        /** An object that represents appointment data. */
        data: AppointmentModel;
        /** A component that renders an icon for recurring appointments. */
        recurringIconComponent: React.ComponentType<object>;
        /** Specifies whether the appointment is vertical or horizontal. */
        type: 'vertical' | 'horizontal';
        /** A function that formats dates according to the locale. */
        formatDate: FormatterFn;
    }
    /***
      * Properties passed to a component that renders an element
      * which indicates the appointment is divided.
      * */
    interface SplitIndicatorProps {
        /** Specifies whether the element is rendered at the start or end of the divided appointment. */
        position: 'start' | 'end';
        /** Specifies whether the appointment is vertical or horizontal. */
        appointmentType: 'vertical' | 'horizontal';
    }
    /** Properties passed to a component that renders a container for the appointment. */
    interface ContainerProps {
        /** An object that configures the appointment’s geometry and position. */
        style: any;
    }
}
export interface AppointmentsProps {
    /** A component that renders an appointment. */
    appointmentComponent: React.ComponentType<Appointments.AppointmentProps>;
    /** A component that renders the appointment content. */
    appointmentContentComponent: React.ComponentType<Appointments.AppointmentContentProps>;
    /** A component that renders an element which indicates the appointment is divided. */
    splitIndicatorComponent: React.ComponentType<Appointments.SplitIndicatorProps>;
    /** A component that renders an icon for recurring appointments. */
    recurringIconComponent: React.ComponentType<object>;
    /** A component that renders a container for the appointment. */
    containerComponent: React.ComponentType<Appointments.ContainerProps>;
}

export namespace TodayButton {
  /** Properties passed to the component that renders the today button. */
  interface ButtonProps {
    /** Function that sets the Scheduler's current date. */
    setCurrentDate: (nextDate: Date) => void;
    /** Returns a localization message by the message key. */
    getMessage: (messageKey: string) => string;
  }
  /** Localization Messages */
  interface LocalizationMessages {
    /** The today button’s text. */
    today?: string;
  }
}
export interface TodayButtonProps {
  /** A component that renders the today button. */
  buttonComponent: React.ComponentType<TodayButton.ButtonProps>;
  /** An object that specifies localization messages. */
  messages?: TodayButton.LocalizationMessages;
}

export declare type SchedulerDateTime = Date | number | string;
export declare type AppointmentId = number | string;
/** Describes an appointment data object. */
export interface AppointmentModel {
  /** The start date. */
  startDate: SchedulerDateTime;
  /** The end date. */
  endDate: SchedulerDateTime;
  /** The title. */
  title?: string;
  /** The all day flag. */
  allDay?: boolean;
  /** The identifier. */
  id?: number | string;
  /** Specifies the appointment recurrence rule. */
  rRule?: string | undefined;
  /** Specifies dates excluded from recurrence. */
  exDate?: string | undefined;
  /** Any other properties. */
  [propertyName: string]: any;
}
export interface Appointment {
  /** The start date. */
  start: SchedulerDateTime;
  /** The end date. */
  end: SchedulerDateTime;
  /** The all day flag. */
  allDay?: boolean;
  /** The recurrence rule. */
  rRule?: string;
  /** The exception date-times. */
  exDate?: string;
  /** The all appointment data */
  dataItem: AppointmentModel;
}
export interface TimeScale {
  start: Date;
  end: Date;
}
export declare type AllDayCell = {
  startDate: SchedulerDateTime;
  endDate: SchedulerDateTime;
};
export declare type FormatterFn = (nextDate: SchedulerDateTime | undefined, nextOptions: Intl.DateTimeFormatOptions) => string;
/** Describes a current view object. */
export interface SchedulerView {
  /** View's unique identifier. */
  name: string;
  /** View's visible name. */
  displayName: string;
}
export declare type ScrollingStrategy = {
  topBoundary: number;
  bottomBoundary: number;
  changeVerticalScroll: (value: number) => void;
};
export declare type CellElementsMeta = {
  parentRect: () => ClientRect | DOMRect;
  getCellRects: Array<() => ClientRect | DOMRect>;
};

export declare type ViewCellData = {
  startDate: Date;
  endDate: Date;
};
export interface AppointmentMoment {
  start: moment.Moment;
  end: moment.Moment;
  title?: string;
  allDay?: boolean;
  id?: number | string;
  [propertyName: string]: any;
}



/** An appointment's meta data object. */
export interface AppointmentMeta {
  /** A React component instance or a DOM element that is used to position the tooltip. */
  target: React.ReactInstance;
  /** The appointment's displayed metadata. */
  data: AppointmentModel;
}



export declare type AppointmentChanges = {
  [key: string]: object;
};
export declare type Changes = Partial<AppointmentModel>;
export declare type EditAppointmentPayload = {
  appointmentId: AppointmentId;
};
export declare type RecurrenceEditType = 'all' | 'currentAndFollowing' | 'current';
export declare type PreCommitChangesFn = (changes: Changes | null, appointmentData: Partial<AppointmentModel>, type: RecurrenceEditType) => ChangeSet;
/** Describes uncommitted changes made to the scheduler data. */
export interface ChangeSet {
  /** An array of rows to be created. */
  added?: {
    [key: string]: any;
  };
  /** An associative array that stores changes made to existing data. Each array item specifies changes made to a row. The item's key specifies the associated row's ID. */
  changed?: {
    [key: string]: any;
  };
  /** An array of IDs representing rows to be deleted. */
  deleted?: number | string;
}



/** Describes a cell data configuration object. */
export interface MonthCellData {
  /** Specifies the cell start time. */
  startDate: Date;
  /** Specifies the cell end time. */
  endDate: Date;
  /** Indicates whether the cell's date is not in the current month. */
  otherMonth: boolean;
  /** Indicates whether the cell's date is today. */
  today: boolean;
}



export interface ChangeCurrentDatePayload {
  nextDate: Date;
  step: 'day' | 'week' | 'month';
  amount: number;
  direction: string;
}





export declare type ClientOffset = {
  x: number;
  y: number;
};

